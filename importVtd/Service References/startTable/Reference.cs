//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18444
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This code was auto-generated by Microsoft.Silverlight.ServiceReference, version 5.0.61118.0
// 
namespace importVtd.startTable {
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatusAnswer_ImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetDBDefect))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.InfoForNewImport))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetDBDefectFile))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetDBDefectMaping))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.MG_ImpVtd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.ThreadForMgImpVtd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.CountVtdSec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.VtdSec))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.VtdSecParam))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.VtdNumberDogAllList))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.DictDefectXSL_ImpVtd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.VtdDogovorParams))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.VtdTubeBaza))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.ImpLogVtd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetTubeJournal))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetStatisticsTable))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.KeyImpVtd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.KeyUserVtd))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.ServiceVersion))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetDbRepers))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetFileRepers))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.GetImportSecond))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.RemoveBound))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.KeyBoundResult))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.Res_Job))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.JobStatus))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(importVtd.startTable.ImpVTD_Making))]
    public partial class StatusAnswer_ImpVtd : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ErrorMessageField;
        
        private bool IsValidField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ErrorMessage {
            get {
                return this.ErrorMessageField;
            }
            set {
                if ((object.ReferenceEquals(this.ErrorMessageField, value) != true)) {
                    this.ErrorMessageField = value;
                    this.RaisePropertyChanged("ErrorMessage");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsValid {
            get {
                return this.IsValidField;
            }
            set {
                if ((this.IsValidField.Equals(value) != true)) {
                    this.IsValidField = value;
                    this.RaisePropertyChanged("IsValid");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDBDefect", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetDBDefect : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.GetDBDefectList[] GetDBDefectListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.GetDBDefectList[] GetDBDefectList {
            get {
                return this.GetDBDefectListField;
            }
            set {
                if ((object.ReferenceEquals(this.GetDBDefectListField, value) != true)) {
                    this.GetDBDefectListField = value;
                    this.RaisePropertyChanged("GetDBDefectList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoForNewImport", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class InfoForNewImport : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.InfoForNewImportVtd[] GetInfoNewImportVtdListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.InfoForNewImportVtd[] GetInfoNewImportVtdList {
            get {
                return this.GetInfoNewImportVtdListField;
            }
            set {
                if ((object.ReferenceEquals(this.GetInfoNewImportVtdListField, value) != true)) {
                    this.GetInfoNewImportVtdListField = value;
                    this.RaisePropertyChanged("GetInfoNewImportVtdList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDBDefectFile", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetDBDefectFile : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.GetDBDefectListFile[] GetDBDefectListFileField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.GetDBDefectListFile[] GetDBDefectListFile {
            get {
                return this.GetDBDefectListFileField;
            }
            set {
                if ((object.ReferenceEquals(this.GetDBDefectListFileField, value) != true)) {
                    this.GetDBDefectListFileField = value;
                    this.RaisePropertyChanged("GetDBDefectListFile");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDBDefectMaping", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetDBDefectMaping : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.GetDBDefectMapingList[] GetDBDefectMapingListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.GetDBDefectMapingList[] GetDBDefectMapingList {
            get {
                return this.GetDBDefectMapingListField;
            }
            set {
                if ((object.ReferenceEquals(this.GetDBDefectMapingListField, value) != true)) {
                    this.GetDBDefectMapingListField = value;
                    this.RaisePropertyChanged("GetDBDefectMapingList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MG_ImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class MG_ImpVtd : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.MG_List_ImpVtd[] MG_List_ImpVtdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.MG_List_ImpVtd[] MG_List_ImpVtd {
            get {
                return this.MG_List_ImpVtdField;
            }
            set {
                if ((object.ReferenceEquals(this.MG_List_ImpVtdField, value) != true)) {
                    this.MG_List_ImpVtdField = value;
                    this.RaisePropertyChanged("MG_List_ImpVtd");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThreadForMgImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ThreadForMgImpVtd : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.ThreadForMgListImpVtd[] ThreadForMgListImpVtdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.ThreadForMgListImpVtd[] ThreadForMgListImpVtd {
            get {
                return this.ThreadForMgListImpVtdField;
            }
            set {
                if ((object.ReferenceEquals(this.ThreadForMgListImpVtdField, value) != true)) {
                    this.ThreadForMgListImpVtdField = value;
                    this.RaisePropertyChanged("ThreadForMgListImpVtd");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountVtdSec", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class CountVtdSec : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.CountVtd CountVtdResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.CountVtd CountVtdResult {
            get {
                return this.CountVtdResultField;
            }
            set {
                if ((object.ReferenceEquals(this.CountVtdResultField, value) != true)) {
                    this.CountVtdResultField = value;
                    this.RaisePropertyChanged("CountVtdResult");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdSec", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdSec : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.VtdSecList[] VtdSecListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.VtdSecList[] VtdSecList {
            get {
                return this.VtdSecListField;
            }
            set {
                if ((object.ReferenceEquals(this.VtdSecListField, value) != true)) {
                    this.VtdSecListField = value;
                    this.RaisePropertyChanged("VtdSecList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdSecParam", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdSecParam : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.VtdSecParamItem[] VtdSecParamItemField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.VtdSecParamItem[] VtdSecParamItem {
            get {
                return this.VtdSecParamItemField;
            }
            set {
                if ((object.ReferenceEquals(this.VtdSecParamItemField, value) != true)) {
                    this.VtdSecParamItemField = value;
                    this.RaisePropertyChanged("VtdSecParamItem");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdNumberDogAllList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdNumberDogAllList : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.VtdDataAllList[] VtdDataAllListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.VtdDataAllList[] VtdDataAllList {
            get {
                return this.VtdDataAllListField;
            }
            set {
                if ((object.ReferenceEquals(this.VtdDataAllListField, value) != true)) {
                    this.VtdDataAllListField = value;
                    this.RaisePropertyChanged("VtdDataAllList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictDefectXSL_ImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DictDefectXSL_ImpVtd : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.DictDefectXSL_List_ImpVtd[] DictDefectXSL_List_ImpVtdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.DictDefectXSL_List_ImpVtd[] DictDefectXSL_List_ImpVtd {
            get {
                return this.DictDefectXSL_List_ImpVtdField;
            }
            set {
                if ((object.ReferenceEquals(this.DictDefectXSL_List_ImpVtdField, value) != true)) {
                    this.DictDefectXSL_List_ImpVtdField = value;
                    this.RaisePropertyChanged("DictDefectXSL_List_ImpVtd");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdDogovorParams", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdDogovorParams : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.VtdDataParams[] VtdDataParamsField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.VtdDataParams[] VtdDataParams {
            get {
                return this.VtdDataParamsField;
            }
            set {
                if ((object.ReferenceEquals(this.VtdDataParamsField, value) != true)) {
                    this.VtdDataParamsField = value;
                    this.RaisePropertyChanged("VtdDataParams");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdTubeBaza", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdTubeBaza : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.TubeBaza[] ListTubeBazaField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.TubeBaza[] ListTubeBaza {
            get {
                return this.ListTubeBazaField;
            }
            set {
                if ((object.ReferenceEquals(this.ListTubeBazaField, value) != true)) {
                    this.ListTubeBazaField = value;
                    this.RaisePropertyChanged("ListTubeBaza");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpLogVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpLogVtd : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.ImpLog_result ImpLog_resultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.ImpLog_result ImpLog_result {
            get {
                return this.ImpLog_resultField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpLog_resultField, value) != true)) {
                    this.ImpLog_resultField = value;
                    this.RaisePropertyChanged("ImpLog_result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetTubeJournal", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetTubeJournal : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.TubeJournalTableList[] TubeJournalTableListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.TubeJournalTableList[] TubeJournalTableList {
            get {
                return this.TubeJournalTableListField;
            }
            set {
                if ((object.ReferenceEquals(this.TubeJournalTableListField, value) != true)) {
                    this.TubeJournalTableListField = value;
                    this.RaisePropertyChanged("TubeJournalTableList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetStatisticsTable", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetStatisticsTable : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.StatisticsTable[] StatisticsTableListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.StatisticsTable[] StatisticsTableList {
            get {
                return this.StatisticsTableListField;
            }
            set {
                if ((object.ReferenceEquals(this.StatisticsTableListField, value) != true)) {
                    this.StatisticsTableListField = value;
                    this.RaisePropertyChanged("StatisticsTableList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyImpVtd : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.KeyImp KeyImpResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.KeyImp KeyImpResult {
            get {
                return this.KeyImpResultField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyImpResultField, value) != true)) {
                    this.KeyImpResultField = value;
                    this.RaisePropertyChanged("KeyImpResult");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyUserVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyUserVtd : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.KeyUser KeyUserResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.KeyUser KeyUserResult {
            get {
                return this.KeyUserResultField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyUserResultField, value) != true)) {
                    this.KeyUserResultField = value;
                    this.RaisePropertyChanged("KeyUserResult");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceVersion", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ServiceVersion : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.ServiceVersionTxt ServiceVersionResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.ServiceVersionTxt ServiceVersionResult {
            get {
                return this.ServiceVersionResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceVersionResultField, value) != true)) {
                    this.ServiceVersionResultField = value;
                    this.RaisePropertyChanged("ServiceVersionResult");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDbRepers", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetDbRepers : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.DbRepersTableList[] DbRepersTableListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.DbRepersTableList[] DbRepersTableList {
            get {
                return this.DbRepersTableListField;
            }
            set {
                if ((object.ReferenceEquals(this.DbRepersTableListField, value) != true)) {
                    this.DbRepersTableListField = value;
                    this.RaisePropertyChanged("DbRepersTableList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetFileRepers", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetFileRepers : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.FileRepersList[] FileRepersListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.FileRepersList[] FileRepersList {
            get {
                return this.FileRepersListField;
            }
            set {
                if ((object.ReferenceEquals(this.FileRepersListField, value) != true)) {
                    this.FileRepersListField = value;
                    this.RaisePropertyChanged("FileRepersList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetImportSecond", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetImportSecond : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.ImportSecondResult ImportSecond_ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.ImportSecondResult ImportSecond_Result {
            get {
                return this.ImportSecond_ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.ImportSecond_ResultField, value) != true)) {
                    this.ImportSecond_ResultField = value;
                    this.RaisePropertyChanged("ImportSecond_Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoveBound", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class RemoveBound : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.RemoveBoundResult RemoveBound_ResultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.RemoveBoundResult RemoveBound_Result {
            get {
                return this.RemoveBound_ResultField;
            }
            set {
                if ((object.ReferenceEquals(this.RemoveBound_ResultField, value) != true)) {
                    this.RemoveBound_ResultField = value;
                    this.RaisePropertyChanged("RemoveBound_Result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyBoundResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyBoundResult : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.KeyBound[] GetKeyBoundListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.KeyBound[] GetKeyBoundList {
            get {
                return this.GetKeyBoundListField;
            }
            set {
                if ((object.ReferenceEquals(this.GetKeyBoundListField, value) != true)) {
                    this.GetKeyBoundListField = value;
                    this.RaisePropertyChanged("GetKeyBoundList");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Res_Job", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Res_Job : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.Res_Job_status Res_Job_statusField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.Res_Job_status Res_Job_status {
            get {
                return this.Res_Job_statusField;
            }
            set {
                if ((object.ReferenceEquals(this.Res_Job_statusField, value) != true)) {
                    this.Res_Job_statusField = value;
                    this.RaisePropertyChanged("Res_Job_status");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobStatus", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class JobStatus : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.JobStatusResult JobStatus_resultField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.JobStatusResult JobStatus_result {
            get {
                return this.JobStatus_resultField;
            }
            set {
                if ((object.ReferenceEquals(this.JobStatus_resultField, value) != true)) {
                    this.JobStatus_resultField = value;
                    this.RaisePropertyChanged("JobStatus_result");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpVTD_Making", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpVTD_Making : importVtd.startTable.StatusAnswer_ImpVtd {
        
        private importVtd.startTable.ImpVTD_Making_List[] ImpVTD_Making_ListField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public importVtd.startTable.ImpVTD_Making_List[] ImpVTD_Making_List {
            get {
                return this.ImpVTD_Making_ListField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpVTD_Making_ListField, value) != true)) {
                    this.ImpVTD_Making_ListField = value;
                    this.RaisePropertyChanged("ImpVTD_Making_List");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpVTD_Making_List", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpVTD_Making_List : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CFILENAMEField;
        
        private string NIMP_MAKINGField;
        
        private string NSTATEKEYField;
        
        private string cStateField;
        
        private string cState1Field;
        
        private string cStateKeyField;
        
        private string ccodeField;
        
        private string cnumber_contractField;
        
        private string dTimeField;
        
        private string ddate_contractField;
        
        private string fioField;
        
        private string userKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CFILENAME {
            get {
                return this.CFILENAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CFILENAMEField, value) != true)) {
                    this.CFILENAMEField = value;
                    this.RaisePropertyChanged("CFILENAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NIMP_MAKING {
            get {
                return this.NIMP_MAKINGField;
            }
            set {
                if ((object.ReferenceEquals(this.NIMP_MAKINGField, value) != true)) {
                    this.NIMP_MAKINGField = value;
                    this.RaisePropertyChanged("NIMP_MAKING");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NSTATEKEY {
            get {
                return this.NSTATEKEYField;
            }
            set {
                if ((object.ReferenceEquals(this.NSTATEKEYField, value) != true)) {
                    this.NSTATEKEYField = value;
                    this.RaisePropertyChanged("NSTATEKEY");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cState {
            get {
                return this.cStateField;
            }
            set {
                if ((object.ReferenceEquals(this.cStateField, value) != true)) {
                    this.cStateField = value;
                    this.RaisePropertyChanged("cState");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cState1 {
            get {
                return this.cState1Field;
            }
            set {
                if ((object.ReferenceEquals(this.cState1Field, value) != true)) {
                    this.cState1Field = value;
                    this.RaisePropertyChanged("cState1");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cStateKey {
            get {
                return this.cStateKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.cStateKeyField, value) != true)) {
                    this.cStateKeyField = value;
                    this.RaisePropertyChanged("cStateKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ccode {
            get {
                return this.ccodeField;
            }
            set {
                if ((object.ReferenceEquals(this.ccodeField, value) != true)) {
                    this.ccodeField = value;
                    this.RaisePropertyChanged("ccode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cnumber_contract {
            get {
                return this.cnumber_contractField;
            }
            set {
                if ((object.ReferenceEquals(this.cnumber_contractField, value) != true)) {
                    this.cnumber_contractField = value;
                    this.RaisePropertyChanged("cnumber_contract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dTime {
            get {
                return this.dTimeField;
            }
            set {
                if ((object.ReferenceEquals(this.dTimeField, value) != true)) {
                    this.dTimeField = value;
                    this.RaisePropertyChanged("dTime");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ddate_contract {
            get {
                return this.ddate_contractField;
            }
            set {
                if ((object.ReferenceEquals(this.ddate_contractField, value) != true)) {
                    this.ddate_contractField = value;
                    this.RaisePropertyChanged("ddate_contract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string fio {
            get {
                return this.fioField;
            }
            set {
                if ((object.ReferenceEquals(this.fioField, value) != true)) {
                    this.fioField = value;
                    this.RaisePropertyChanged("fio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string userKey {
            get {
                return this.userKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.userKeyField, value) != true)) {
                    this.userKeyField = value;
                    this.RaisePropertyChanged("userKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDBDefectList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetDBDefectList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNAMEDEFECTField;
        
        private string CNAMEGROUPDEFECTField;
        
        private string NKEYDEFECTField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNAMEDEFECT {
            get {
                return this.CNAMEDEFECTField;
            }
            set {
                if ((object.ReferenceEquals(this.CNAMEDEFECTField, value) != true)) {
                    this.CNAMEDEFECTField = value;
                    this.RaisePropertyChanged("CNAMEDEFECT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNAMEGROUPDEFECT {
            get {
                return this.CNAMEGROUPDEFECTField;
            }
            set {
                if ((object.ReferenceEquals(this.CNAMEGROUPDEFECTField, value) != true)) {
                    this.CNAMEGROUPDEFECTField = value;
                    this.RaisePropertyChanged("CNAMEGROUPDEFECT");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NKEYDEFECT {
            get {
                return this.NKEYDEFECTField;
            }
            set {
                if ((object.ReferenceEquals(this.NKEYDEFECTField, value) != true)) {
                    this.NKEYDEFECTField = value;
                    this.RaisePropertyChanged("NKEYDEFECT");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoForNewImportVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class InfoForNewImportVtd : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string cMainExecutorField;
        
        private string cNameVTGField;
        
        private string cNameWorkField;
        
        private string cNumberContractField;
        
        private string cSubExecutorField;
        
        private string dDateContractField;
        
        private string keyContractField;
        
        private string keyMgField;
        
        private string keyPipeField;
        
        private string keySectionField;
        
        private string nKmBeginField;
        
        private string nKmEndField;
        
        private string nLengthField;
        
        private string nameFileField;
        
        private string сMTNameField;
        
        private string сPipeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cMainExecutor {
            get {
                return this.cMainExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.cMainExecutorField, value) != true)) {
                    this.cMainExecutorField = value;
                    this.RaisePropertyChanged("cMainExecutor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cNameVTG {
            get {
                return this.cNameVTGField;
            }
            set {
                if ((object.ReferenceEquals(this.cNameVTGField, value) != true)) {
                    this.cNameVTGField = value;
                    this.RaisePropertyChanged("cNameVTG");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cNameWork {
            get {
                return this.cNameWorkField;
            }
            set {
                if ((object.ReferenceEquals(this.cNameWorkField, value) != true)) {
                    this.cNameWorkField = value;
                    this.RaisePropertyChanged("cNameWork");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cNumberContract {
            get {
                return this.cNumberContractField;
            }
            set {
                if ((object.ReferenceEquals(this.cNumberContractField, value) != true)) {
                    this.cNumberContractField = value;
                    this.RaisePropertyChanged("cNumberContract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cSubExecutor {
            get {
                return this.cSubExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.cSubExecutorField, value) != true)) {
                    this.cSubExecutorField = value;
                    this.RaisePropertyChanged("cSubExecutor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string dDateContract {
            get {
                return this.dDateContractField;
            }
            set {
                if ((object.ReferenceEquals(this.dDateContractField, value) != true)) {
                    this.dDateContractField = value;
                    this.RaisePropertyChanged("dDateContract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string keyContract {
            get {
                return this.keyContractField;
            }
            set {
                if ((object.ReferenceEquals(this.keyContractField, value) != true)) {
                    this.keyContractField = value;
                    this.RaisePropertyChanged("keyContract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string keyMg {
            get {
                return this.keyMgField;
            }
            set {
                if ((object.ReferenceEquals(this.keyMgField, value) != true)) {
                    this.keyMgField = value;
                    this.RaisePropertyChanged("keyMg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string keyPipe {
            get {
                return this.keyPipeField;
            }
            set {
                if ((object.ReferenceEquals(this.keyPipeField, value) != true)) {
                    this.keyPipeField = value;
                    this.RaisePropertyChanged("keyPipe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string keySection {
            get {
                return this.keySectionField;
            }
            set {
                if ((object.ReferenceEquals(this.keySectionField, value) != true)) {
                    this.keySectionField = value;
                    this.RaisePropertyChanged("keySection");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nKmBegin {
            get {
                return this.nKmBeginField;
            }
            set {
                if ((object.ReferenceEquals(this.nKmBeginField, value) != true)) {
                    this.nKmBeginField = value;
                    this.RaisePropertyChanged("nKmBegin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nKmEnd {
            get {
                return this.nKmEndField;
            }
            set {
                if ((object.ReferenceEquals(this.nKmEndField, value) != true)) {
                    this.nKmEndField = value;
                    this.RaisePropertyChanged("nKmEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nLength {
            get {
                return this.nLengthField;
            }
            set {
                if ((object.ReferenceEquals(this.nLengthField, value) != true)) {
                    this.nLengthField = value;
                    this.RaisePropertyChanged("nLength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nameFile {
            get {
                return this.nameFileField;
            }
            set {
                if ((object.ReferenceEquals(this.nameFileField, value) != true)) {
                    this.nameFileField = value;
                    this.RaisePropertyChanged("nameFile");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string сMTName {
            get {
                return this.сMTNameField;
            }
            set {
                if ((object.ReferenceEquals(this.сMTNameField, value) != true)) {
                    this.сMTNameField = value;
                    this.RaisePropertyChanged("сMTName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string сPipeName {
            get {
                return this.сPipeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.сPipeNameField, value) != true)) {
                    this.сPipeNameField = value;
                    this.RaisePropertyChanged("сPipeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDBDefectListFile", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetDBDefectListFile : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNAMEDEFECTField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNAMEDEFECT {
            get {
                return this.CNAMEDEFECTField;
            }
            set {
                if ((object.ReferenceEquals(this.CNAMEDEFECTField, value) != true)) {
                    this.CNAMEDEFECTField = value;
                    this.RaisePropertyChanged("CNAMEDEFECT");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GetDBDefectMapingList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class GetDBDefectMapingList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string cDefectNameField;
        
        private string cFileDefectNameField;
        
        private string cGroupDefectNameField;
        
        private string nKeyDefectField;
        
        private string nKeyMapingField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cDefectName {
            get {
                return this.cDefectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cDefectNameField, value) != true)) {
                    this.cDefectNameField = value;
                    this.RaisePropertyChanged("cDefectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cFileDefectName {
            get {
                return this.cFileDefectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cFileDefectNameField, value) != true)) {
                    this.cFileDefectNameField = value;
                    this.RaisePropertyChanged("cFileDefectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cGroupDefectName {
            get {
                return this.cGroupDefectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.cGroupDefectNameField, value) != true)) {
                    this.cGroupDefectNameField = value;
                    this.RaisePropertyChanged("cGroupDefectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nKeyDefect {
            get {
                return this.nKeyDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.nKeyDefectField, value) != true)) {
                    this.nKeyDefectField = value;
                    this.RaisePropertyChanged("nKeyDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nKeyMaping {
            get {
                return this.nKeyMapingField;
            }
            set {
                if ((object.ReferenceEquals(this.nKeyMapingField, value) != true)) {
                    this.nKeyMapingField = value;
                    this.RaisePropertyChanged("nKeyMaping");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="MG_List_ImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class MG_List_ImpVtd : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNAMEField;
        
        private string NMAIN_GAS_PIPELINE_KEYField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNAME {
            get {
                return this.CNAMEField;
            }
            set {
                if ((object.ReferenceEquals(this.CNAMEField, value) != true)) {
                    this.CNAMEField = value;
                    this.RaisePropertyChanged("CNAME");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NMAIN_GAS_PIPELINE_KEY {
            get {
                return this.NMAIN_GAS_PIPELINE_KEYField;
            }
            set {
                if ((object.ReferenceEquals(this.NMAIN_GAS_PIPELINE_KEYField, value) != true)) {
                    this.NMAIN_GAS_PIPELINE_KEYField = value;
                    this.RaisePropertyChanged("NMAIN_GAS_PIPELINE_KEY");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ThreadForMgListImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ThreadForMgListImpVtd : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameField;
        
        private string ThreadKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ThreadKey {
            get {
                return this.ThreadKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ThreadKeyField, value) != true)) {
                    this.ThreadKeyField = value;
                    this.RaisePropertyChanged("ThreadKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CountVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class CountVtd : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CountVtdSecField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CountVtdSec {
            get {
                return this.CountVtdSecField;
            }
            set {
                if ((object.ReferenceEquals(this.CountVtdSecField, value) != true)) {
                    this.CountVtdSecField = value;
                    this.RaisePropertyChanged("CountVtdSec");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdSecList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdSecList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string NameRegionField;
        
        private string VtdSectionKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameRegion {
            get {
                return this.NameRegionField;
            }
            set {
                if ((object.ReferenceEquals(this.NameRegionField, value) != true)) {
                    this.NameRegionField = value;
                    this.RaisePropertyChanged("NameRegion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VtdSectionKey {
            get {
                return this.VtdSectionKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.VtdSectionKeyField, value) != true)) {
                    this.VtdSectionKeyField = value;
                    this.RaisePropertyChanged("VtdSectionKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdSecParamItem", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdSecParamItem : object, System.ComponentModel.INotifyPropertyChanged {
        
        private decimal KmBeginRegField;
        
        private decimal KmEndRegField;
        
        private string NameRegionField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal KmBeginReg {
            get {
                return this.KmBeginRegField;
            }
            set {
                if ((this.KmBeginRegField.Equals(value) != true)) {
                    this.KmBeginRegField = value;
                    this.RaisePropertyChanged("KmBeginReg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public decimal KmEndReg {
            get {
                return this.KmEndRegField;
            }
            set {
                if ((this.KmEndRegField.Equals(value) != true)) {
                    this.KmEndRegField = value;
                    this.RaisePropertyChanged("KmEndReg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameRegion {
            get {
                return this.NameRegionField;
            }
            set {
                if ((object.ReferenceEquals(this.NameRegionField, value) != true)) {
                    this.NameRegionField = value;
                    this.RaisePropertyChanged("NameRegion");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdDataAllList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdDataAllList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ImpCountField;
        
        private string NumberContractField;
        
        private string VtdDataKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImpCount {
            get {
                return this.ImpCountField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpCountField, value) != true)) {
                    this.ImpCountField = value;
                    this.RaisePropertyChanged("ImpCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumberContract {
            get {
                return this.NumberContractField;
            }
            set {
                if ((object.ReferenceEquals(this.NumberContractField, value) != true)) {
                    this.NumberContractField = value;
                    this.RaisePropertyChanged("NumberContract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VtdDataKey {
            get {
                return this.VtdDataKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.VtdDataKeyField, value) != true)) {
                    this.VtdDataKeyField = value;
                    this.RaisePropertyChanged("VtdDataKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DictDefectXSL_List_ImpVtd", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DictDefectXSL_List_ImpVtd : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNameDictField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNameDict {
            get {
                return this.CNameDictField;
            }
            set {
                if ((object.ReferenceEquals(this.CNameDictField, value) != true)) {
                    this.CNameDictField = value;
                    this.RaisePropertyChanged("CNameDict");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdDataParams", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdDataParams : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DateContractField;
        
        private string MainExecutorField;
        
        private string NameworkField;
        
        private string SubExecutorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DateContract {
            get {
                return this.DateContractField;
            }
            set {
                if ((object.ReferenceEquals(this.DateContractField, value) != true)) {
                    this.DateContractField = value;
                    this.RaisePropertyChanged("DateContract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainExecutor {
            get {
                return this.MainExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.MainExecutorField, value) != true)) {
                    this.MainExecutorField = value;
                    this.RaisePropertyChanged("MainExecutor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Namework {
            get {
                return this.NameworkField;
            }
            set {
                if ((object.ReferenceEquals(this.NameworkField, value) != true)) {
                    this.NameworkField = value;
                    this.RaisePropertyChanged("Namework");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubExecutor {
            get {
                return this.SubExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.SubExecutorField, value) != true)) {
                    this.SubExecutorField = value;
                    this.RaisePropertyChanged("SubExecutor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TubeBaza", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class TubeBaza : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AngleField;
        
        private string CountField;
        
        private string DepthPipeField;
        
        private string LengthField;
        
        private string LocKmBegField;
        
        private string NumPipePartField;
        
        private string PipeElementMontajKeyField;
        
        private string TypeField;
        
        private string TypePipeKeyField;
        
        private string TypeShortField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Angle {
            get {
                return this.AngleField;
            }
            set {
                if ((object.ReferenceEquals(this.AngleField, value) != true)) {
                    this.AngleField = value;
                    this.RaisePropertyChanged("Angle");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Count {
            get {
                return this.CountField;
            }
            set {
                if ((object.ReferenceEquals(this.CountField, value) != true)) {
                    this.CountField = value;
                    this.RaisePropertyChanged("Count");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepthPipe {
            get {
                return this.DepthPipeField;
            }
            set {
                if ((object.ReferenceEquals(this.DepthPipeField, value) != true)) {
                    this.DepthPipeField = value;
                    this.RaisePropertyChanged("DepthPipe");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Length {
            get {
                return this.LengthField;
            }
            set {
                if ((object.ReferenceEquals(this.LengthField, value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocKmBeg {
            get {
                return this.LocKmBegField;
            }
            set {
                if ((object.ReferenceEquals(this.LocKmBegField, value) != true)) {
                    this.LocKmBegField = value;
                    this.RaisePropertyChanged("LocKmBeg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NumPipePart {
            get {
                return this.NumPipePartField;
            }
            set {
                if ((object.ReferenceEquals(this.NumPipePartField, value) != true)) {
                    this.NumPipePartField = value;
                    this.RaisePropertyChanged("NumPipePart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PipeElementMontajKey {
            get {
                return this.PipeElementMontajKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.PipeElementMontajKeyField, value) != true)) {
                    this.PipeElementMontajKeyField = value;
                    this.RaisePropertyChanged("PipeElementMontajKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypePipeKey {
            get {
                return this.TypePipeKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.TypePipeKeyField, value) != true)) {
                    this.TypePipeKeyField = value;
                    this.RaisePropertyChanged("TypePipeKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeShort {
            get {
                return this.TypeShortField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeShortField, value) != true)) {
                    this.TypeShortField = value;
                    this.RaisePropertyChanged("TypeShort");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpLog_result", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImpLog_result : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ImpLog_result_retField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ImpLog_result_ret {
            get {
                return this.ImpLog_result_retField;
            }
            set {
                if ((object.ReferenceEquals(this.ImpLog_result_retField, value) != true)) {
                    this.ImpLog_result_retField = value;
                    this.RaisePropertyChanged("ImpLog_result_ret");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="TubeJournalTableList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class TubeJournalTableList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CoefField;
        
        private string DefCountField;
        
        private string KmField;
        
        private string LengthField;
        
        private string MgKmField;
        
        private string MgLenghtField;
        
        private string PipeNoField;
        
        private string RawKeyField;
        
        private string SecNoField;
        
        private string ThicknessField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Coef {
            get {
                return this.CoefField;
            }
            set {
                if ((object.ReferenceEquals(this.CoefField, value) != true)) {
                    this.CoefField = value;
                    this.RaisePropertyChanged("Coef");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefCount {
            get {
                return this.DefCountField;
            }
            set {
                if ((object.ReferenceEquals(this.DefCountField, value) != true)) {
                    this.DefCountField = value;
                    this.RaisePropertyChanged("DefCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Km {
            get {
                return this.KmField;
            }
            set {
                if ((object.ReferenceEquals(this.KmField, value) != true)) {
                    this.KmField = value;
                    this.RaisePropertyChanged("Km");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Length {
            get {
                return this.LengthField;
            }
            set {
                if ((object.ReferenceEquals(this.LengthField, value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MgKm {
            get {
                return this.MgKmField;
            }
            set {
                if ((object.ReferenceEquals(this.MgKmField, value) != true)) {
                    this.MgKmField = value;
                    this.RaisePropertyChanged("MgKm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MgLenght {
            get {
                return this.MgLenghtField;
            }
            set {
                if ((object.ReferenceEquals(this.MgLenghtField, value) != true)) {
                    this.MgLenghtField = value;
                    this.RaisePropertyChanged("MgLenght");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PipeNo {
            get {
                return this.PipeNoField;
            }
            set {
                if ((object.ReferenceEquals(this.PipeNoField, value) != true)) {
                    this.PipeNoField = value;
                    this.RaisePropertyChanged("PipeNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RawKey {
            get {
                return this.RawKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RawKeyField, value) != true)) {
                    this.RawKeyField = value;
                    this.RaisePropertyChanged("RawKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecNo {
            get {
                return this.SecNoField;
            }
            set {
                if ((object.ReferenceEquals(this.SecNoField, value) != true)) {
                    this.SecNoField = value;
                    this.RaisePropertyChanged("SecNo");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Thickness {
            get {
                return this.ThicknessField;
            }
            set {
                if ((object.ReferenceEquals(this.ThicknessField, value) != true)) {
                    this.ThicknessField = value;
                    this.RaisePropertyChanged("Thickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="StatisticsTable", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class StatisticsTable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string AbnormalAnomalyField;
        
        private string AvgCoefCountField;
        
        private string CorrosionDefectField;
        
        private string CracklikeDefectField;
        
        private string DefectsQtyField;
        
        private string FormDefectField;
        
        private string MagnAnomCountField;
        
        private string PipeElemCountField;
        
        private string RepOnKmCountField;
        
        private string StressCorrosionDefectField;
        
        private string TransverseJointAnomalyField;
        
        private string UsedRepCountField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AbnormalAnomaly {
            get {
                return this.AbnormalAnomalyField;
            }
            set {
                if ((object.ReferenceEquals(this.AbnormalAnomalyField, value) != true)) {
                    this.AbnormalAnomalyField = value;
                    this.RaisePropertyChanged("AbnormalAnomaly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AvgCoefCount {
            get {
                return this.AvgCoefCountField;
            }
            set {
                if ((object.ReferenceEquals(this.AvgCoefCountField, value) != true)) {
                    this.AvgCoefCountField = value;
                    this.RaisePropertyChanged("AvgCoefCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CorrosionDefect {
            get {
                return this.CorrosionDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.CorrosionDefectField, value) != true)) {
                    this.CorrosionDefectField = value;
                    this.RaisePropertyChanged("CorrosionDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CracklikeDefect {
            get {
                return this.CracklikeDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.CracklikeDefectField, value) != true)) {
                    this.CracklikeDefectField = value;
                    this.RaisePropertyChanged("CracklikeDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefectsQty {
            get {
                return this.DefectsQtyField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectsQtyField, value) != true)) {
                    this.DefectsQtyField = value;
                    this.RaisePropertyChanged("DefectsQty");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FormDefect {
            get {
                return this.FormDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.FormDefectField, value) != true)) {
                    this.FormDefectField = value;
                    this.RaisePropertyChanged("FormDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MagnAnomCount {
            get {
                return this.MagnAnomCountField;
            }
            set {
                if ((object.ReferenceEquals(this.MagnAnomCountField, value) != true)) {
                    this.MagnAnomCountField = value;
                    this.RaisePropertyChanged("MagnAnomCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PipeElemCount {
            get {
                return this.PipeElemCountField;
            }
            set {
                if ((object.ReferenceEquals(this.PipeElemCountField, value) != true)) {
                    this.PipeElemCountField = value;
                    this.RaisePropertyChanged("PipeElemCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RepOnKmCount {
            get {
                return this.RepOnKmCountField;
            }
            set {
                if ((object.ReferenceEquals(this.RepOnKmCountField, value) != true)) {
                    this.RepOnKmCountField = value;
                    this.RaisePropertyChanged("RepOnKmCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string StressCorrosionDefect {
            get {
                return this.StressCorrosionDefectField;
            }
            set {
                if ((object.ReferenceEquals(this.StressCorrosionDefectField, value) != true)) {
                    this.StressCorrosionDefectField = value;
                    this.RaisePropertyChanged("StressCorrosionDefect");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TransverseJointAnomaly {
            get {
                return this.TransverseJointAnomalyField;
            }
            set {
                if ((object.ReferenceEquals(this.TransverseJointAnomalyField, value) != true)) {
                    this.TransverseJointAnomalyField = value;
                    this.RaisePropertyChanged("TransverseJointAnomaly");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UsedRepCount {
            get {
                return this.UsedRepCountField;
            }
            set {
                if ((object.ReferenceEquals(this.UsedRepCountField, value) != true)) {
                    this.UsedRepCountField = value;
                    this.RaisePropertyChanged("UsedRepCount");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyImp", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyImp : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyImpVtdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyImpVtd {
            get {
                return this.KeyImpVtdField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyImpVtdField, value) != true)) {
                    this.KeyImpVtdField = value;
                    this.RaisePropertyChanged("KeyImpVtd");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyUser", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyUser : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyUserVtdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyUserVtd {
            get {
                return this.KeyUserVtdField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyUserVtdField, value) != true)) {
                    this.KeyUserVtdField = value;
                    this.RaisePropertyChanged("KeyUserVtd");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServiceVersionTxt", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ServiceVersionTxt : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ServiceVersionTxtVtdField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ServiceVersionTxtVtd {
            get {
                return this.ServiceVersionTxtVtdField;
            }
            set {
                if ((object.ReferenceEquals(this.ServiceVersionTxtVtdField, value) != true)) {
                    this.ServiceVersionTxtVtdField = value;
                    this.RaisePropertyChanged("ServiceVersionTxtVtd");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DbRepersTableList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DbRepersTableList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string EntityNameField;
        
        private string FiltertypeField;
        
        private string KmField;
        
        private string NameField;
        
        private string ObjKeyField;
        
        private string ObjTypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string EntityName {
            get {
                return this.EntityNameField;
            }
            set {
                if ((object.ReferenceEquals(this.EntityNameField, value) != true)) {
                    this.EntityNameField = value;
                    this.RaisePropertyChanged("EntityName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Filtertype {
            get {
                return this.FiltertypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FiltertypeField, value) != true)) {
                    this.FiltertypeField = value;
                    this.RaisePropertyChanged("Filtertype");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Km {
            get {
                return this.KmField;
            }
            set {
                if ((object.ReferenceEquals(this.KmField, value) != true)) {
                    this.KmField = value;
                    this.RaisePropertyChanged("Km");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjKey {
            get {
                return this.ObjKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjKeyField, value) != true)) {
                    this.ObjKeyField = value;
                    this.RaisePropertyChanged("ObjKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ObjType {
            get {
                return this.ObjTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ObjTypeField, value) != true)) {
                    this.ObjTypeField = value;
                    this.RaisePropertyChanged("ObjType");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileRepersList", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class FileRepersList : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string DescField;
        
        private string FilterTypeField;
        
        private string KmField;
        
        private string LabelField;
        
        private string RawKeyField;
        
        private string SecCountField;
        
        private string TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Desc {
            get {
                return this.DescField;
            }
            set {
                if ((object.ReferenceEquals(this.DescField, value) != true)) {
                    this.DescField = value;
                    this.RaisePropertyChanged("Desc");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FilterType {
            get {
                return this.FilterTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.FilterTypeField, value) != true)) {
                    this.FilterTypeField = value;
                    this.RaisePropertyChanged("FilterType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Km {
            get {
                return this.KmField;
            }
            set {
                if ((object.ReferenceEquals(this.KmField, value) != true)) {
                    this.KmField = value;
                    this.RaisePropertyChanged("Km");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Label {
            get {
                return this.LabelField;
            }
            set {
                if ((object.ReferenceEquals(this.LabelField, value) != true)) {
                    this.LabelField = value;
                    this.RaisePropertyChanged("Label");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RawKey {
            get {
                return this.RawKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.RawKeyField, value) != true)) {
                    this.RawKeyField = value;
                    this.RaisePropertyChanged("RawKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecCount {
            get {
                return this.SecCountField;
            }
            set {
                if ((object.ReferenceEquals(this.SecCountField, value) != true)) {
                    this.SecCountField = value;
                    this.RaisePropertyChanged("SecCount");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImportSecondResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class ImportSecondResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int ImportSecondVTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ImportSecondVTD {
            get {
                return this.ImportSecondVTDField;
            }
            set {
                if ((this.ImportSecondVTDField.Equals(value) != true)) {
                    this.ImportSecondVTDField = value;
                    this.RaisePropertyChanged("ImportSecondVTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RemoveBoundResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class RemoveBoundResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private int RemoveBoundVTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int RemoveBoundVTD {
            get {
                return this.RemoveBoundVTDField;
            }
            set {
                if ((this.RemoveBoundVTDField.Equals(value) != true)) {
                    this.RemoveBoundVTDField = value;
                    this.RaisePropertyChanged("RemoveBoundVTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="KeyBound", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class KeyBound : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KeyBDField;
        
        private string KeyFileField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyBD {
            get {
                return this.KeyBDField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyBDField, value) != true)) {
                    this.KeyBDField = value;
                    this.RaisePropertyChanged("KeyBD");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KeyFile {
            get {
                return this.KeyFileField;
            }
            set {
                if ((object.ReferenceEquals(this.KeyFileField, value) != true)) {
                    this.KeyFileField = value;
                    this.RaisePropertyChanged("KeyFile");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Res_Job_status", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class Res_Job_status : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ReturnStatusField;
        
        private string VTDMakingKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ReturnStatus {
            get {
                return this.ReturnStatusField;
            }
            set {
                if ((object.ReferenceEquals(this.ReturnStatusField, value) != true)) {
                    this.ReturnStatusField = value;
                    this.RaisePropertyChanged("ReturnStatus");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string VTDMakingKey {
            get {
                return this.VTDMakingKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.VTDMakingKeyField, value) != true)) {
                    this.VTDMakingKeyField = value;
                    this.RaisePropertyChanged("VTDMakingKey");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="JobStatusResult", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class JobStatusResult : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string JobStatusVTDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string JobStatusVTD {
            get {
                return this.JobStatusVTDField;
            }
            set {
                if ((object.ReferenceEquals(this.JobStatusVTDField, value) != true)) {
                    this.JobStatusVTDField = value;
                    this.RaisePropertyChanged("JobStatusVTD");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DefectListTube", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DefectListTube : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double ClockwisePosField;
        
        private string DefectTypeKeyField;
        
        private string DepthField;
        
        private string DepthPosField;
        
        private double LengthField;
        
        private string LocNkmField;
        
        private string PersentCorrozField;
        
        private string PipeElemField;
        
        private string PipeWallThicknessField;
        
        private double PrevSeamDistField;
        
        private string TypeField;
        
        private double WidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ClockwisePos {
            get {
                return this.ClockwisePosField;
            }
            set {
                if ((this.ClockwisePosField.Equals(value) != true)) {
                    this.ClockwisePosField = value;
                    this.RaisePropertyChanged("ClockwisePos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefectTypeKey {
            get {
                return this.DefectTypeKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectTypeKeyField, value) != true)) {
                    this.DefectTypeKeyField = value;
                    this.RaisePropertyChanged("DefectTypeKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Depth {
            get {
                return this.DepthField;
            }
            set {
                if ((object.ReferenceEquals(this.DepthField, value) != true)) {
                    this.DepthField = value;
                    this.RaisePropertyChanged("Depth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepthPos {
            get {
                return this.DepthPosField;
            }
            set {
                if ((object.ReferenceEquals(this.DepthPosField, value) != true)) {
                    this.DepthPosField = value;
                    this.RaisePropertyChanged("DepthPos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocNkm {
            get {
                return this.LocNkmField;
            }
            set {
                if ((object.ReferenceEquals(this.LocNkmField, value) != true)) {
                    this.LocNkmField = value;
                    this.RaisePropertyChanged("LocNkm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersentCorroz {
            get {
                return this.PersentCorrozField;
            }
            set {
                if ((object.ReferenceEquals(this.PersentCorrozField, value) != true)) {
                    this.PersentCorrozField = value;
                    this.RaisePropertyChanged("PersentCorroz");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PipeElem {
            get {
                return this.PipeElemField;
            }
            set {
                if ((object.ReferenceEquals(this.PipeElemField, value) != true)) {
                    this.PipeElemField = value;
                    this.RaisePropertyChanged("PipeElem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PipeWallThickness {
            get {
                return this.PipeWallThicknessField;
            }
            set {
                if ((object.ReferenceEquals(this.PipeWallThicknessField, value) != true)) {
                    this.PipeWallThicknessField = value;
                    this.RaisePropertyChanged("PipeWallThickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PrevSeamDist {
            get {
                return this.PrevSeamDistField;
            }
            set {
                if ((this.PrevSeamDistField.Equals(value) != true)) {
                    this.PrevSeamDistField = value;
                    this.RaisePropertyChanged("PrevSeamDist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DefectListTubeRight", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class DefectListTubeRight : object, System.ComponentModel.INotifyPropertyChanged {
        
        private double ClockwisePosField;
        
        private string DefectTypeKeyField;
        
        private string DepthField;
        
        private string DepthPosField;
        
        private double LengthField;
        
        private string LocNkmField;
        
        private string PersentCorrozField;
        
        private string PipeElemField;
        
        private string PipewallThicknessField;
        
        private double PrevSeamDistField;
        
        private string TypeField;
        
        private double WidthField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double ClockwisePos {
            get {
                return this.ClockwisePosField;
            }
            set {
                if ((this.ClockwisePosField.Equals(value) != true)) {
                    this.ClockwisePosField = value;
                    this.RaisePropertyChanged("ClockwisePos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DefectTypeKey {
            get {
                return this.DefectTypeKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.DefectTypeKeyField, value) != true)) {
                    this.DefectTypeKeyField = value;
                    this.RaisePropertyChanged("DefectTypeKey");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Depth {
            get {
                return this.DepthField;
            }
            set {
                if ((object.ReferenceEquals(this.DepthField, value) != true)) {
                    this.DepthField = value;
                    this.RaisePropertyChanged("Depth");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string DepthPos {
            get {
                return this.DepthPosField;
            }
            set {
                if ((object.ReferenceEquals(this.DepthPosField, value) != true)) {
                    this.DepthPosField = value;
                    this.RaisePropertyChanged("DepthPos");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Length {
            get {
                return this.LengthField;
            }
            set {
                if ((this.LengthField.Equals(value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LocNkm {
            get {
                return this.LocNkmField;
            }
            set {
                if ((object.ReferenceEquals(this.LocNkmField, value) != true)) {
                    this.LocNkmField = value;
                    this.RaisePropertyChanged("LocNkm");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PersentCorroz {
            get {
                return this.PersentCorrozField;
            }
            set {
                if ((object.ReferenceEquals(this.PersentCorrozField, value) != true)) {
                    this.PersentCorrozField = value;
                    this.RaisePropertyChanged("PersentCorroz");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PipeElem {
            get {
                return this.PipeElemField;
            }
            set {
                if ((object.ReferenceEquals(this.PipeElemField, value) != true)) {
                    this.PipeElemField = value;
                    this.RaisePropertyChanged("PipeElem");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PipewallThickness {
            get {
                return this.PipewallThicknessField;
            }
            set {
                if ((object.ReferenceEquals(this.PipewallThicknessField, value) != true)) {
                    this.PipewallThicknessField = value;
                    this.RaisePropertyChanged("PipewallThickness");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double PrevSeamDist {
            get {
                return this.PrevSeamDistField;
            }
            set {
                if ((this.PrevSeamDistField.Equals(value) != true)) {
                    this.PrevSeamDistField = value;
                    this.RaisePropertyChanged("PrevSeamDist");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Type {
            get {
                return this.TypeField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeField, value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public double Width {
            get {
                return this.WidthField;
            }
            set {
                if ((this.WidthField.Equals(value) != true)) {
                    this.WidthField = value;
                    this.RaisePropertyChanged("Width");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="VtdfileParamTable", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class VtdfileParamTable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string ContractDateField;
        
        private string ContractNField;
        
        private string FioField;
        
        private string MainExecutorField;
        
        private string PlaceField;
        
        private string PositionField;
        
        private string SubExecutorField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractDate {
            get {
                return this.ContractDateField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractDateField, value) != true)) {
                    this.ContractDateField = value;
                    this.RaisePropertyChanged("ContractDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ContractN {
            get {
                return this.ContractNField;
            }
            set {
                if ((object.ReferenceEquals(this.ContractNField, value) != true)) {
                    this.ContractNField = value;
                    this.RaisePropertyChanged("ContractN");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Fio {
            get {
                return this.FioField;
            }
            set {
                if ((object.ReferenceEquals(this.FioField, value) != true)) {
                    this.FioField = value;
                    this.RaisePropertyChanged("Fio");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MainExecutor {
            get {
                return this.MainExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.MainExecutorField, value) != true)) {
                    this.MainExecutorField = value;
                    this.RaisePropertyChanged("MainExecutor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Place {
            get {
                return this.PlaceField;
            }
            set {
                if ((object.ReferenceEquals(this.PlaceField, value) != true)) {
                    this.PlaceField = value;
                    this.RaisePropertyChanged("Place");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Position {
            get {
                return this.PositionField;
            }
            set {
                if ((object.ReferenceEquals(this.PositionField, value) != true)) {
                    this.PositionField = value;
                    this.RaisePropertyChanged("Position");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SubExecutor {
            get {
                return this.SubExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.SubExecutorField, value) != true)) {
                    this.SubExecutorField = value;
                    this.RaisePropertyChanged("SubExecutor");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoForVtdImportTable", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class InfoForVtdImportTable : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string KmEndField;
        
        private string KmStartField;
        
        private string LengthField;
        
        private string MgField;
        
        private string NameRegionField;
        
        private string ThreadField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KmEnd {
            get {
                return this.KmEndField;
            }
            set {
                if ((object.ReferenceEquals(this.KmEndField, value) != true)) {
                    this.KmEndField = value;
                    this.RaisePropertyChanged("KmEnd");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string KmStart {
            get {
                return this.KmStartField;
            }
            set {
                if ((object.ReferenceEquals(this.KmStartField, value) != true)) {
                    this.KmStartField = value;
                    this.RaisePropertyChanged("KmStart");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Length {
            get {
                return this.LengthField;
            }
            set {
                if ((object.ReferenceEquals(this.LengthField, value) != true)) {
                    this.LengthField = value;
                    this.RaisePropertyChanged("Length");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Mg {
            get {
                return this.MgField;
            }
            set {
                if ((object.ReferenceEquals(this.MgField, value) != true)) {
                    this.MgField = value;
                    this.RaisePropertyChanged("Mg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string NameRegion {
            get {
                return this.NameRegionField;
            }
            set {
                if ((object.ReferenceEquals(this.NameRegionField, value) != true)) {
                    this.NameRegionField = value;
                    this.RaisePropertyChanged("NameRegion");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Thread {
            get {
                return this.ThreadField;
            }
            set {
                if ((object.ReferenceEquals(this.ThreadField, value) != true)) {
                    this.ThreadField = value;
                    this.RaisePropertyChanged("Thread");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="InfoForOneVtdImport", Namespace="http://schemas.datacontract.org/2004/07/")]
    public partial class InfoForOneVtdImport : object, System.ComponentModel.INotifyPropertyChanged {
        
        private string CNAMEWORKField;
        
        private string cMainExecutorField;
        
        private string cSubExecutorField;
        
        private string cnamevtgField;
        
        private string cnumbercontractField;
        
        private string ddatecontractField;
        
        private string nkmbeginField;
        
        private string nkmendField;
        
        private string nlengthField;
        
        private string сMTNameField;
        
        private string сPipeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CNAMEWORK {
            get {
                return this.CNAMEWORKField;
            }
            set {
                if ((object.ReferenceEquals(this.CNAMEWORKField, value) != true)) {
                    this.CNAMEWORKField = value;
                    this.RaisePropertyChanged("CNAMEWORK");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cMainExecutor {
            get {
                return this.cMainExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.cMainExecutorField, value) != true)) {
                    this.cMainExecutorField = value;
                    this.RaisePropertyChanged("cMainExecutor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cSubExecutor {
            get {
                return this.cSubExecutorField;
            }
            set {
                if ((object.ReferenceEquals(this.cSubExecutorField, value) != true)) {
                    this.cSubExecutorField = value;
                    this.RaisePropertyChanged("cSubExecutor");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cnamevtg {
            get {
                return this.cnamevtgField;
            }
            set {
                if ((object.ReferenceEquals(this.cnamevtgField, value) != true)) {
                    this.cnamevtgField = value;
                    this.RaisePropertyChanged("cnamevtg");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string cnumbercontract {
            get {
                return this.cnumbercontractField;
            }
            set {
                if ((object.ReferenceEquals(this.cnumbercontractField, value) != true)) {
                    this.cnumbercontractField = value;
                    this.RaisePropertyChanged("cnumbercontract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ddatecontract {
            get {
                return this.ddatecontractField;
            }
            set {
                if ((object.ReferenceEquals(this.ddatecontractField, value) != true)) {
                    this.ddatecontractField = value;
                    this.RaisePropertyChanged("ddatecontract");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nkmbegin {
            get {
                return this.nkmbeginField;
            }
            set {
                if ((object.ReferenceEquals(this.nkmbeginField, value) != true)) {
                    this.nkmbeginField = value;
                    this.RaisePropertyChanged("nkmbegin");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nkmend {
            get {
                return this.nkmendField;
            }
            set {
                if ((object.ReferenceEquals(this.nkmendField, value) != true)) {
                    this.nkmendField = value;
                    this.RaisePropertyChanged("nkmend");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string nlength {
            get {
                return this.nlengthField;
            }
            set {
                if ((object.ReferenceEquals(this.nlengthField, value) != true)) {
                    this.nlengthField = value;
                    this.RaisePropertyChanged("nlength");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string сMTName {
            get {
                return this.сMTNameField;
            }
            set {
                if ((object.ReferenceEquals(this.сMTNameField, value) != true)) {
                    this.сMTNameField = value;
                    this.RaisePropertyChanged("сMTName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string сPipeName {
            get {
                return this.сPipeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.сPipeNameField, value) != true)) {
                    this.сPipeNameField = value;
                    this.RaisePropertyChanged("сPipeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="startTable.IoraWCFService_ImpVtd")]
    public interface IoraWCFService_ImpVtd {
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Get_ImpVTD_Making_List", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Get_ImpVTD_Making_ListResponse")]
        System.IAsyncResult BeginGet_ImpVTD_Making_List(System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.ImpVTD_Making EndGet_ImpVTD_Making_List(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetDBDefect_List", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetDBDefect_ListResponse")]
        System.IAsyncResult BeginGetDBDefect_List(System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetDBDefect EndGetDBDefect_List(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetInfoForNewImport", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetInfoForNewImportResponse")]
        System.IAsyncResult BeginGetInfoForNewImport(string keyImp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.InfoForNewImport EndGetInfoForNewImport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetDBDefect_ListFile", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetDBDefect_ListFileResponse")]
        System.IAsyncResult BeginGetDBDefect_ListFile(string keyImp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetDBDefectFile EndGetDBDefect_ListFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetDbDefectMaping", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetDbDefectMapingResponse")]
        System.IAsyncResult BeginGetDbDefectMaping(string keyImp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetDBDefectMaping EndGetDbDefectMaping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/DeleteMapingDict", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/DeleteMapingDictResponse")]
        System.IAsyncResult BeginDeleteMapingDict(string keyMap, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndDeleteMapingDict(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/SaveMapingDict", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/SaveMapingDictResponse")]
        System.IAsyncResult BeginSaveMapingDict(importVtd.startTable.GetDBDefectMapingList[] dBDefectMapingList, string keyImp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndSaveMapingDict(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Get_ImpVTD_Making_One", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Get_ImpVTD_Making_OneResponse")]
        System.IAsyncResult BeginGet_ImpVTD_Making_One(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.ImpVTD_Making EndGet_ImpVTD_Making_One(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Get_MG_ImpVtd", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Get_MG_ImpVtdResponse")]
        System.IAsyncResult BeginGet_MG_ImpVtd(System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.MG_ImpVtd EndGet_MG_ImpVtd(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetThreadsForMg", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetThreadsForMgResponse")]
        System.IAsyncResult BeginGetThreadsForMg(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.ThreadForMgImpVtd EndGetThreadsForMg(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetCountVtdForThread", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetCountVtdForThreadResponse")]
        System.IAsyncResult BeginGetCountVtdForThread(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.CountVtdSec EndGetCountVtdForThread(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetVTDSec_List", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetVTDSec_ListResponse")]
        System.IAsyncResult BeginGetVTDSec_List(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.VtdSec EndGetVTDSec_List(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetVTDSec_Param", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetVTDSec_ParamResponse")]
        System.IAsyncResult BeginGetVTDSec_Param(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.VtdSecParam EndGetVTDSec_Param(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetVTD_data_AllList", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetVTD_data_AllListResponse")]
        System.IAsyncResult BeginGetVTD_data_AllList(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.VtdNumberDogAllList EndGetVTD_data_AllList(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Get_DictDefectXSL", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Get_DictDefectXSLResponse")]
        System.IAsyncResult BeginGet_DictDefectXSL(string fileName, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.DictDefectXSL_ImpVtd EndGet_DictDefectXSL(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetVTD_Data_Params", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetVTD_Data_ParamsResponse")]
        System.IAsyncResult BeginGetVTD_Data_Params(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.VtdDogovorParams EndGetVTD_Data_Params(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetLeftTableData", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetLeftTableDataResponse")]
        System.IAsyncResult BeginGetLeftTableData(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.VtdTubeBaza EndGetLeftTableData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetRightTableData", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetRightTableDataResponse")]
        System.IAsyncResult BeginGetRightTableData(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.VtdTubeBaza EndGetRightTableData(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetLeftDefectListTube", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetLeftDefectListTubeResponse")]
        System.IAsyncResult BeginGetLeftDefectListTube(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.DefectListTube[] EndGetLeftDefectListTube(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetRightDefectListTube", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetRightDefectListTubeResponse")]
        System.IAsyncResult BeginGetRightDefectListTube(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.DefectListTubeRight[] EndGetRightDefectListTube(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/VTD_MapsDicts", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/VTD_MapsDictsResponse")]
        System.IAsyncResult BeginVTD_MapsDicts(string ikeyImport, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndVTD_MapsDicts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/MapsDicts", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/MapsDictsResponse")]
        System.IAsyncResult BeginMapsDicts(string ikeyImport, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndMapsDicts(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Getvtdfile_param", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Getvtdfile_paramResponse")]
        System.IAsyncResult BeginGetvtdfile_param(string tmp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.VtdfileParamTable[] EndGetvtdfile_param(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Load_VTDXLSfile", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Load_VTDXLSfileResponse")]
        System.IAsyncResult BeginLoad_VTDXLSfile(string tmp, System.AsyncCallback callback, object asyncState);
        
        string EndLoad_VTDXLSfile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetImpLog", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetImpLogResponse")]
        System.IAsyncResult BeginGetImpLog(string tmp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.ImpLogVtd EndGetImpLog(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/ApplyKeyMap", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/ApplyKeyMapResponse")]
        System.IAsyncResult BeginApplyKeyMap(string tmp, string arrayKey, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndApplyKeyMap(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Get_TubeJournal", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Get_TubeJournalResponse")]
        System.IAsyncResult BeginGet_TubeJournal(string keyImp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetTubeJournal EndGet_TubeJournal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetInfoForVtdImport", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetInfoForVtdImportResponse")]
        System.IAsyncResult BeginGetInfoForVtdImport(string tmp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.InfoForVtdImportTable[] EndGetInfoForVtdImport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/StatisticsTable", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/StatisticsTableResponse")]
        System.IAsyncResult BeginStatisticsTable(string keyImport, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetStatisticsTable EndStatisticsTable(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/ImportVTDLaunches", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/ImportVTDLaunchesResponse")]
        System.IAsyncResult BeginImportVTDLaunches(string tmp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndImportVTDLaunches(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/ImportDefects", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/ImportDefectsResponse")]
        System.IAsyncResult BeginImportDefects(string tmp, System.AsyncCallback callback, object asyncState);
        
        string EndImportDefects(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/ImportTubeJournal", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/ImportTubeJournalResponse")]
        System.IAsyncResult BeginImportTubeJournal(string tmp, System.AsyncCallback callback, object asyncState);
        
        string EndImportTubeJournal(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetUserNameById", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetUserNameByIdResponse")]
        System.IAsyncResult BeginGetUserNameById(string userKey, System.AsyncCallback callback, object asyncState);
        
        string EndGetUserNameById(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/DeleteVtdImport", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/DeleteVtdImportResponse")]
        System.IAsyncResult BeginDeleteVtdImport(string keyImport, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndDeleteVtdImport(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Create_New_ImportVTD", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Create_New_ImportVTDResponse")]
        System.IAsyncResult BeginCreate_New_ImportVTD(string userKeyVar, string fileNameVar, string pathVar, string vtdDataKeyVar, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.KeyImpVtd EndCreate_New_ImportVTD(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetKeyUser", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetKeyUserResponse")]
        System.IAsyncResult BeginGetKeyUser(System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.KeyUserVtd EndGetKeyUser(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetServiceVersion", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetServiceVersionResponse")]
        System.IAsyncResult BeginGetServiceVersion(System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.ServiceVersion EndGetServiceVersion(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetDbRepers", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetDbRepersResponse")]
        System.IAsyncResult BeginGetDbRepers(string keyImp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetDbRepers EndGetDbRepers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetFileRepers", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetFileRepersResponse")]
        System.IAsyncResult BeginGetFileRepers(string tmp, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetFileRepers EndGetFileRepers(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/Load_VTDXLSfileTrue", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/Load_VTDXLSfileTrueResponse")]
        System.IAsyncResult BeginLoad_VTDXLSfileTrue(string newImportKey, string fileName, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndLoad_VTDXLSfileTrue(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/ImportFile", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/ImportFileResponse")]
        System.IAsyncResult BeginImportFile(double impKey, string typeOfImport, string fileName, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.StatusAnswer_ImpVtd EndImportFile(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/IsOld_VTD_Available", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/IsOld_VTD_AvailableResponse")]
        System.IAsyncResult BeginIsOld_VTD_Available(string vtdMakingKey, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.GetImportSecond EndIsOld_VTD_Available(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/RemoveBound", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/RemoveBoundResponse")]
        System.IAsyncResult BeginRemoveBound(string keyImport, string filekey, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.RemoveBound EndRemoveBound(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/ImportTubeMatching", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/ImportTubeMatchingResponse")]
        System.IAsyncResult BeginImportTubeMatching(string vtdMakingKey, string filekey, string dbKey, int typeLink, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.KeyBoundResult EndImportTubeMatching(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetTemMapping", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetTemMappingResponse")]
        System.IAsyncResult BeginGetTemMapping(string vtdMakingKey, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.KeyBoundResult EndGetTemMapping(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetVtdJobStatus", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetVtdJobStatusResponse")]
        System.IAsyncResult BeginGetVtdJobStatus(System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.Res_Job EndGetVtdJobStatus(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetVtdImpInfo", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetVtdImpInfoResponse")]
        System.IAsyncResult BeginGetVtdImpInfo(string key, System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.InfoForOneVtdImport[] EndGetVtdImpInfo(System.IAsyncResult result);
        
        [System.ServiceModel.OperationContractAttribute(AsyncPattern=true, Action="http://tempuri.org/IoraWCFService_ImpVtd/GetJobStatus", ReplyAction="http://tempuri.org/IoraWCFService_ImpVtd/GetJobStatusResponse")]
        System.IAsyncResult BeginGetJobStatus(System.AsyncCallback callback, object asyncState);
        
        importVtd.startTable.JobStatus EndGetJobStatus(System.IAsyncResult result);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IoraWCFService_ImpVtdChannel : importVtd.startTable.IoraWCFService_ImpVtd, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get_ImpVTD_Making_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get_ImpVTD_Making_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.ImpVTD_Making Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.ImpVTD_Making)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDBDefect_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDBDefect_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetDBDefect Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetDBDefect)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInfoForNewImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInfoForNewImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.InfoForNewImport Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.InfoForNewImport)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDBDefect_ListFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDBDefect_ListFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetDBDefectFile Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetDBDefectFile)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDbDefectMapingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDbDefectMapingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetDBDefectMaping Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetDBDefectMaping)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteMapingDictCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteMapingDictCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class SaveMapingDictCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public SaveMapingDictCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get_ImpVTD_Making_OneCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get_ImpVTD_Making_OneCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.ImpVTD_Making Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.ImpVTD_Making)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get_MG_ImpVtdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get_MG_ImpVtdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.MG_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.MG_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetThreadsForMgCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetThreadsForMgCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.ThreadForMgImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.ThreadForMgImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetCountVtdForThreadCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetCountVtdForThreadCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.CountVtdSec Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.CountVtdSec)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVTDSec_ListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVTDSec_ListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.VtdSec Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.VtdSec)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVTDSec_ParamCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVTDSec_ParamCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.VtdSecParam Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.VtdSecParam)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVTD_data_AllListCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVTD_data_AllListCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.VtdNumberDogAllList Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.VtdNumberDogAllList)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get_DictDefectXSLCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get_DictDefectXSLCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.DictDefectXSL_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.DictDefectXSL_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVTD_Data_ParamsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVTD_Data_ParamsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.VtdDogovorParams Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.VtdDogovorParams)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLeftTableDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLeftTableDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.VtdTubeBaza Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.VtdTubeBaza)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRightTableDataCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRightTableDataCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.VtdTubeBaza Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.VtdTubeBaza)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetLeftDefectListTubeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetLeftDefectListTubeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.DefectListTube[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.DefectListTube[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetRightDefectListTubeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetRightDefectListTubeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.DefectListTubeRight[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.DefectListTubeRight[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class VTD_MapsDictsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public VTD_MapsDictsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class MapsDictsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public MapsDictsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Getvtdfile_paramCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Getvtdfile_paramCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.VtdfileParamTable[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.VtdfileParamTable[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Load_VTDXLSfileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Load_VTDXLSfileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetImpLogCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetImpLogCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.ImpLogVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.ImpLogVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ApplyKeyMapCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ApplyKeyMapCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Get_TubeJournalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Get_TubeJournalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetTubeJournal Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetTubeJournal)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetInfoForVtdImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetInfoForVtdImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.InfoForVtdImportTable[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.InfoForVtdImportTable[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class StatisticsTableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public StatisticsTableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetStatisticsTable Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetStatisticsTable)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportVTDLaunchesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportVTDLaunchesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportDefectsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportDefectsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportTubeJournalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportTubeJournalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetUserNameByIdCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetUserNameByIdCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public string Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DeleteVtdImportCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public DeleteVtdImportCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Create_New_ImportVTDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Create_New_ImportVTDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.KeyImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.KeyImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetKeyUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetKeyUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.KeyUserVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.KeyUserVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetServiceVersionCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetServiceVersionCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.ServiceVersion Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.ServiceVersion)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetDbRepersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetDbRepersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetDbRepers Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetDbRepers)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetFileRepersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetFileRepersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetFileRepers Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetFileRepers)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class Load_VTDXLSfileTrueCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public Load_VTDXLSfileTrueCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportFileCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportFileCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.StatusAnswer_ImpVtd Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.StatusAnswer_ImpVtd)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IsOld_VTD_AvailableCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public IsOld_VTD_AvailableCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.GetImportSecond Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.GetImportSecond)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class RemoveBoundCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public RemoveBoundCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.RemoveBound Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.RemoveBound)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class ImportTubeMatchingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public ImportTubeMatchingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.KeyBoundResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.KeyBoundResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetTemMappingCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetTemMappingCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.KeyBoundResult Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.KeyBoundResult)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVtdJobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVtdJobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.Res_Job Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.Res_Job)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetVtdImpInfoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetVtdImpInfoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.InfoForOneVtdImport[] Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.InfoForOneVtdImport[])(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class GetJobStatusCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        public GetJobStatusCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        public importVtd.startTable.JobStatus Result {
            get {
                base.RaiseExceptionIfNecessary();
                return ((importVtd.startTable.JobStatus)(this.results[0]));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class IoraWCFService_ImpVtdClient : System.ServiceModel.ClientBase<importVtd.startTable.IoraWCFService_ImpVtd>, importVtd.startTable.IoraWCFService_ImpVtd {
        
        private BeginOperationDelegate onBeginGet_ImpVTD_Making_ListDelegate;
        
        private EndOperationDelegate onEndGet_ImpVTD_Making_ListDelegate;
        
        private System.Threading.SendOrPostCallback onGet_ImpVTD_Making_ListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDBDefect_ListDelegate;
        
        private EndOperationDelegate onEndGetDBDefect_ListDelegate;
        
        private System.Threading.SendOrPostCallback onGetDBDefect_ListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInfoForNewImportDelegate;
        
        private EndOperationDelegate onEndGetInfoForNewImportDelegate;
        
        private System.Threading.SendOrPostCallback onGetInfoForNewImportCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDBDefect_ListFileDelegate;
        
        private EndOperationDelegate onEndGetDBDefect_ListFileDelegate;
        
        private System.Threading.SendOrPostCallback onGetDBDefect_ListFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDbDefectMapingDelegate;
        
        private EndOperationDelegate onEndGetDbDefectMapingDelegate;
        
        private System.Threading.SendOrPostCallback onGetDbDefectMapingCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteMapingDictDelegate;
        
        private EndOperationDelegate onEndDeleteMapingDictDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteMapingDictCompletedDelegate;
        
        private BeginOperationDelegate onBeginSaveMapingDictDelegate;
        
        private EndOperationDelegate onEndSaveMapingDictDelegate;
        
        private System.Threading.SendOrPostCallback onSaveMapingDictCompletedDelegate;
        
        private BeginOperationDelegate onBeginGet_ImpVTD_Making_OneDelegate;
        
        private EndOperationDelegate onEndGet_ImpVTD_Making_OneDelegate;
        
        private System.Threading.SendOrPostCallback onGet_ImpVTD_Making_OneCompletedDelegate;
        
        private BeginOperationDelegate onBeginGet_MG_ImpVtdDelegate;
        
        private EndOperationDelegate onEndGet_MG_ImpVtdDelegate;
        
        private System.Threading.SendOrPostCallback onGet_MG_ImpVtdCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetThreadsForMgDelegate;
        
        private EndOperationDelegate onEndGetThreadsForMgDelegate;
        
        private System.Threading.SendOrPostCallback onGetThreadsForMgCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetCountVtdForThreadDelegate;
        
        private EndOperationDelegate onEndGetCountVtdForThreadDelegate;
        
        private System.Threading.SendOrPostCallback onGetCountVtdForThreadCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVTDSec_ListDelegate;
        
        private EndOperationDelegate onEndGetVTDSec_ListDelegate;
        
        private System.Threading.SendOrPostCallback onGetVTDSec_ListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVTDSec_ParamDelegate;
        
        private EndOperationDelegate onEndGetVTDSec_ParamDelegate;
        
        private System.Threading.SendOrPostCallback onGetVTDSec_ParamCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVTD_data_AllListDelegate;
        
        private EndOperationDelegate onEndGetVTD_data_AllListDelegate;
        
        private System.Threading.SendOrPostCallback onGetVTD_data_AllListCompletedDelegate;
        
        private BeginOperationDelegate onBeginGet_DictDefectXSLDelegate;
        
        private EndOperationDelegate onEndGet_DictDefectXSLDelegate;
        
        private System.Threading.SendOrPostCallback onGet_DictDefectXSLCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVTD_Data_ParamsDelegate;
        
        private EndOperationDelegate onEndGetVTD_Data_ParamsDelegate;
        
        private System.Threading.SendOrPostCallback onGetVTD_Data_ParamsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLeftTableDataDelegate;
        
        private EndOperationDelegate onEndGetLeftTableDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetLeftTableDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRightTableDataDelegate;
        
        private EndOperationDelegate onEndGetRightTableDataDelegate;
        
        private System.Threading.SendOrPostCallback onGetRightTableDataCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetLeftDefectListTubeDelegate;
        
        private EndOperationDelegate onEndGetLeftDefectListTubeDelegate;
        
        private System.Threading.SendOrPostCallback onGetLeftDefectListTubeCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetRightDefectListTubeDelegate;
        
        private EndOperationDelegate onEndGetRightDefectListTubeDelegate;
        
        private System.Threading.SendOrPostCallback onGetRightDefectListTubeCompletedDelegate;
        
        private BeginOperationDelegate onBeginVTD_MapsDictsDelegate;
        
        private EndOperationDelegate onEndVTD_MapsDictsDelegate;
        
        private System.Threading.SendOrPostCallback onVTD_MapsDictsCompletedDelegate;
        
        private BeginOperationDelegate onBeginMapsDictsDelegate;
        
        private EndOperationDelegate onEndMapsDictsDelegate;
        
        private System.Threading.SendOrPostCallback onMapsDictsCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetvtdfile_paramDelegate;
        
        private EndOperationDelegate onEndGetvtdfile_paramDelegate;
        
        private System.Threading.SendOrPostCallback onGetvtdfile_paramCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoad_VTDXLSfileDelegate;
        
        private EndOperationDelegate onEndLoad_VTDXLSfileDelegate;
        
        private System.Threading.SendOrPostCallback onLoad_VTDXLSfileCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetImpLogDelegate;
        
        private EndOperationDelegate onEndGetImpLogDelegate;
        
        private System.Threading.SendOrPostCallback onGetImpLogCompletedDelegate;
        
        private BeginOperationDelegate onBeginApplyKeyMapDelegate;
        
        private EndOperationDelegate onEndApplyKeyMapDelegate;
        
        private System.Threading.SendOrPostCallback onApplyKeyMapCompletedDelegate;
        
        private BeginOperationDelegate onBeginGet_TubeJournalDelegate;
        
        private EndOperationDelegate onEndGet_TubeJournalDelegate;
        
        private System.Threading.SendOrPostCallback onGet_TubeJournalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetInfoForVtdImportDelegate;
        
        private EndOperationDelegate onEndGetInfoForVtdImportDelegate;
        
        private System.Threading.SendOrPostCallback onGetInfoForVtdImportCompletedDelegate;
        
        private BeginOperationDelegate onBeginStatisticsTableDelegate;
        
        private EndOperationDelegate onEndStatisticsTableDelegate;
        
        private System.Threading.SendOrPostCallback onStatisticsTableCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportVTDLaunchesDelegate;
        
        private EndOperationDelegate onEndImportVTDLaunchesDelegate;
        
        private System.Threading.SendOrPostCallback onImportVTDLaunchesCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportDefectsDelegate;
        
        private EndOperationDelegate onEndImportDefectsDelegate;
        
        private System.Threading.SendOrPostCallback onImportDefectsCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportTubeJournalDelegate;
        
        private EndOperationDelegate onEndImportTubeJournalDelegate;
        
        private System.Threading.SendOrPostCallback onImportTubeJournalCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetUserNameByIdDelegate;
        
        private EndOperationDelegate onEndGetUserNameByIdDelegate;
        
        private System.Threading.SendOrPostCallback onGetUserNameByIdCompletedDelegate;
        
        private BeginOperationDelegate onBeginDeleteVtdImportDelegate;
        
        private EndOperationDelegate onEndDeleteVtdImportDelegate;
        
        private System.Threading.SendOrPostCallback onDeleteVtdImportCompletedDelegate;
        
        private BeginOperationDelegate onBeginCreate_New_ImportVTDDelegate;
        
        private EndOperationDelegate onEndCreate_New_ImportVTDDelegate;
        
        private System.Threading.SendOrPostCallback onCreate_New_ImportVTDCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetKeyUserDelegate;
        
        private EndOperationDelegate onEndGetKeyUserDelegate;
        
        private System.Threading.SendOrPostCallback onGetKeyUserCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetServiceVersionDelegate;
        
        private EndOperationDelegate onEndGetServiceVersionDelegate;
        
        private System.Threading.SendOrPostCallback onGetServiceVersionCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetDbRepersDelegate;
        
        private EndOperationDelegate onEndGetDbRepersDelegate;
        
        private System.Threading.SendOrPostCallback onGetDbRepersCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetFileRepersDelegate;
        
        private EndOperationDelegate onEndGetFileRepersDelegate;
        
        private System.Threading.SendOrPostCallback onGetFileRepersCompletedDelegate;
        
        private BeginOperationDelegate onBeginLoad_VTDXLSfileTrueDelegate;
        
        private EndOperationDelegate onEndLoad_VTDXLSfileTrueDelegate;
        
        private System.Threading.SendOrPostCallback onLoad_VTDXLSfileTrueCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportFileDelegate;
        
        private EndOperationDelegate onEndImportFileDelegate;
        
        private System.Threading.SendOrPostCallback onImportFileCompletedDelegate;
        
        private BeginOperationDelegate onBeginIsOld_VTD_AvailableDelegate;
        
        private EndOperationDelegate onEndIsOld_VTD_AvailableDelegate;
        
        private System.Threading.SendOrPostCallback onIsOld_VTD_AvailableCompletedDelegate;
        
        private BeginOperationDelegate onBeginRemoveBoundDelegate;
        
        private EndOperationDelegate onEndRemoveBoundDelegate;
        
        private System.Threading.SendOrPostCallback onRemoveBoundCompletedDelegate;
        
        private BeginOperationDelegate onBeginImportTubeMatchingDelegate;
        
        private EndOperationDelegate onEndImportTubeMatchingDelegate;
        
        private System.Threading.SendOrPostCallback onImportTubeMatchingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetTemMappingDelegate;
        
        private EndOperationDelegate onEndGetTemMappingDelegate;
        
        private System.Threading.SendOrPostCallback onGetTemMappingCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVtdJobStatusDelegate;
        
        private EndOperationDelegate onEndGetVtdJobStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetVtdJobStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetVtdImpInfoDelegate;
        
        private EndOperationDelegate onEndGetVtdImpInfoDelegate;
        
        private System.Threading.SendOrPostCallback onGetVtdImpInfoCompletedDelegate;
        
        private BeginOperationDelegate onBeginGetJobStatusDelegate;
        
        private EndOperationDelegate onEndGetJobStatusDelegate;
        
        private System.Threading.SendOrPostCallback onGetJobStatusCompletedDelegate;
        
        private BeginOperationDelegate onBeginOpenDelegate;
        
        private EndOperationDelegate onEndOpenDelegate;
        
        private System.Threading.SendOrPostCallback onOpenCompletedDelegate;
        
        private BeginOperationDelegate onBeginCloseDelegate;
        
        private EndOperationDelegate onEndCloseDelegate;
        
        private System.Threading.SendOrPostCallback onCloseCompletedDelegate;
        
        public IoraWCFService_ImpVtdClient() {
        }
        
        public IoraWCFService_ImpVtdClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public IoraWCFService_ImpVtdClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IoraWCFService_ImpVtdClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public IoraWCFService_ImpVtdClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public System.Net.CookieContainer CookieContainer {
            get {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    return httpCookieContainerManager.CookieContainer;
                }
                else {
                    return null;
                }
            }
            set {
                System.ServiceModel.Channels.IHttpCookieContainerManager httpCookieContainerManager = this.InnerChannel.GetProperty<System.ServiceModel.Channels.IHttpCookieContainerManager>();
                if ((httpCookieContainerManager != null)) {
                    httpCookieContainerManager.CookieContainer = value;
                }
                else {
                    throw new System.InvalidOperationException("Unable to set the CookieContainer. Please make sure the binding contains an HttpC" +
                            "ookieContainerBindingElement.");
                }
            }
        }
        
        public event System.EventHandler<Get_ImpVTD_Making_ListCompletedEventArgs> Get_ImpVTD_Making_ListCompleted;
        
        public event System.EventHandler<GetDBDefect_ListCompletedEventArgs> GetDBDefect_ListCompleted;
        
        public event System.EventHandler<GetInfoForNewImportCompletedEventArgs> GetInfoForNewImportCompleted;
        
        public event System.EventHandler<GetDBDefect_ListFileCompletedEventArgs> GetDBDefect_ListFileCompleted;
        
        public event System.EventHandler<GetDbDefectMapingCompletedEventArgs> GetDbDefectMapingCompleted;
        
        public event System.EventHandler<DeleteMapingDictCompletedEventArgs> DeleteMapingDictCompleted;
        
        public event System.EventHandler<SaveMapingDictCompletedEventArgs> SaveMapingDictCompleted;
        
        public event System.EventHandler<Get_ImpVTD_Making_OneCompletedEventArgs> Get_ImpVTD_Making_OneCompleted;
        
        public event System.EventHandler<Get_MG_ImpVtdCompletedEventArgs> Get_MG_ImpVtdCompleted;
        
        public event System.EventHandler<GetThreadsForMgCompletedEventArgs> GetThreadsForMgCompleted;
        
        public event System.EventHandler<GetCountVtdForThreadCompletedEventArgs> GetCountVtdForThreadCompleted;
        
        public event System.EventHandler<GetVTDSec_ListCompletedEventArgs> GetVTDSec_ListCompleted;
        
        public event System.EventHandler<GetVTDSec_ParamCompletedEventArgs> GetVTDSec_ParamCompleted;
        
        public event System.EventHandler<GetVTD_data_AllListCompletedEventArgs> GetVTD_data_AllListCompleted;
        
        public event System.EventHandler<Get_DictDefectXSLCompletedEventArgs> Get_DictDefectXSLCompleted;
        
        public event System.EventHandler<GetVTD_Data_ParamsCompletedEventArgs> GetVTD_Data_ParamsCompleted;
        
        public event System.EventHandler<GetLeftTableDataCompletedEventArgs> GetLeftTableDataCompleted;
        
        public event System.EventHandler<GetRightTableDataCompletedEventArgs> GetRightTableDataCompleted;
        
        public event System.EventHandler<GetLeftDefectListTubeCompletedEventArgs> GetLeftDefectListTubeCompleted;
        
        public event System.EventHandler<GetRightDefectListTubeCompletedEventArgs> GetRightDefectListTubeCompleted;
        
        public event System.EventHandler<VTD_MapsDictsCompletedEventArgs> VTD_MapsDictsCompleted;
        
        public event System.EventHandler<MapsDictsCompletedEventArgs> MapsDictsCompleted;
        
        public event System.EventHandler<Getvtdfile_paramCompletedEventArgs> Getvtdfile_paramCompleted;
        
        public event System.EventHandler<Load_VTDXLSfileCompletedEventArgs> Load_VTDXLSfileCompleted;
        
        public event System.EventHandler<GetImpLogCompletedEventArgs> GetImpLogCompleted;
        
        public event System.EventHandler<ApplyKeyMapCompletedEventArgs> ApplyKeyMapCompleted;
        
        public event System.EventHandler<Get_TubeJournalCompletedEventArgs> Get_TubeJournalCompleted;
        
        public event System.EventHandler<GetInfoForVtdImportCompletedEventArgs> GetInfoForVtdImportCompleted;
        
        public event System.EventHandler<StatisticsTableCompletedEventArgs> StatisticsTableCompleted;
        
        public event System.EventHandler<ImportVTDLaunchesCompletedEventArgs> ImportVTDLaunchesCompleted;
        
        public event System.EventHandler<ImportDefectsCompletedEventArgs> ImportDefectsCompleted;
        
        public event System.EventHandler<ImportTubeJournalCompletedEventArgs> ImportTubeJournalCompleted;
        
        public event System.EventHandler<GetUserNameByIdCompletedEventArgs> GetUserNameByIdCompleted;
        
        public event System.EventHandler<DeleteVtdImportCompletedEventArgs> DeleteVtdImportCompleted;
        
        public event System.EventHandler<Create_New_ImportVTDCompletedEventArgs> Create_New_ImportVTDCompleted;
        
        public event System.EventHandler<GetKeyUserCompletedEventArgs> GetKeyUserCompleted;
        
        public event System.EventHandler<GetServiceVersionCompletedEventArgs> GetServiceVersionCompleted;
        
        public event System.EventHandler<GetDbRepersCompletedEventArgs> GetDbRepersCompleted;
        
        public event System.EventHandler<GetFileRepersCompletedEventArgs> GetFileRepersCompleted;
        
        public event System.EventHandler<Load_VTDXLSfileTrueCompletedEventArgs> Load_VTDXLSfileTrueCompleted;
        
        public event System.EventHandler<ImportFileCompletedEventArgs> ImportFileCompleted;
        
        public event System.EventHandler<IsOld_VTD_AvailableCompletedEventArgs> IsOld_VTD_AvailableCompleted;
        
        public event System.EventHandler<RemoveBoundCompletedEventArgs> RemoveBoundCompleted;
        
        public event System.EventHandler<ImportTubeMatchingCompletedEventArgs> ImportTubeMatchingCompleted;
        
        public event System.EventHandler<GetTemMappingCompletedEventArgs> GetTemMappingCompleted;
        
        public event System.EventHandler<GetVtdJobStatusCompletedEventArgs> GetVtdJobStatusCompleted;
        
        public event System.EventHandler<GetVtdImpInfoCompletedEventArgs> GetVtdImpInfoCompleted;
        
        public event System.EventHandler<GetJobStatusCompletedEventArgs> GetJobStatusCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> OpenCompleted;
        
        public event System.EventHandler<System.ComponentModel.AsyncCompletedEventArgs> CloseCompleted;
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGet_ImpVTD_Making_List(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet_ImpVTD_Making_List(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.ImpVTD_Making importVtd.startTable.IoraWCFService_ImpVtd.EndGet_ImpVTD_Making_List(System.IAsyncResult result) {
            return base.Channel.EndGet_ImpVTD_Making_List(result);
        }
        
        private System.IAsyncResult OnBeginGet_ImpVTD_Making_List(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGet_ImpVTD_Making_List(callback, asyncState);
        }
        
        private object[] OnEndGet_ImpVTD_Making_List(System.IAsyncResult result) {
            importVtd.startTable.ImpVTD_Making retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGet_ImpVTD_Making_List(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet_ImpVTD_Making_ListCompleted(object state) {
            if ((this.Get_ImpVTD_Making_ListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get_ImpVTD_Making_ListCompleted(this, new Get_ImpVTD_Making_ListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get_ImpVTD_Making_ListAsync() {
            this.Get_ImpVTD_Making_ListAsync(null);
        }
        
        public void Get_ImpVTD_Making_ListAsync(object userState) {
            if ((this.onBeginGet_ImpVTD_Making_ListDelegate == null)) {
                this.onBeginGet_ImpVTD_Making_ListDelegate = new BeginOperationDelegate(this.OnBeginGet_ImpVTD_Making_List);
            }
            if ((this.onEndGet_ImpVTD_Making_ListDelegate == null)) {
                this.onEndGet_ImpVTD_Making_ListDelegate = new EndOperationDelegate(this.OnEndGet_ImpVTD_Making_List);
            }
            if ((this.onGet_ImpVTD_Making_ListCompletedDelegate == null)) {
                this.onGet_ImpVTD_Making_ListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet_ImpVTD_Making_ListCompleted);
            }
            base.InvokeAsync(this.onBeginGet_ImpVTD_Making_ListDelegate, null, this.onEndGet_ImpVTD_Making_ListDelegate, this.onGet_ImpVTD_Making_ListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetDBDefect_List(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDBDefect_List(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetDBDefect importVtd.startTable.IoraWCFService_ImpVtd.EndGetDBDefect_List(System.IAsyncResult result) {
            return base.Channel.EndGetDBDefect_List(result);
        }
        
        private System.IAsyncResult OnBeginGetDBDefect_List(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetDBDefect_List(callback, asyncState);
        }
        
        private object[] OnEndGetDBDefect_List(System.IAsyncResult result) {
            importVtd.startTable.GetDBDefect retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetDBDefect_List(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDBDefect_ListCompleted(object state) {
            if ((this.GetDBDefect_ListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDBDefect_ListCompleted(this, new GetDBDefect_ListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDBDefect_ListAsync() {
            this.GetDBDefect_ListAsync(null);
        }
        
        public void GetDBDefect_ListAsync(object userState) {
            if ((this.onBeginGetDBDefect_ListDelegate == null)) {
                this.onBeginGetDBDefect_ListDelegate = new BeginOperationDelegate(this.OnBeginGetDBDefect_List);
            }
            if ((this.onEndGetDBDefect_ListDelegate == null)) {
                this.onEndGetDBDefect_ListDelegate = new EndOperationDelegate(this.OnEndGetDBDefect_List);
            }
            if ((this.onGetDBDefect_ListCompletedDelegate == null)) {
                this.onGetDBDefect_ListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDBDefect_ListCompleted);
            }
            base.InvokeAsync(this.onBeginGetDBDefect_ListDelegate, null, this.onEndGetDBDefect_ListDelegate, this.onGetDBDefect_ListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetInfoForNewImport(string keyImp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInfoForNewImport(keyImp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.InfoForNewImport importVtd.startTable.IoraWCFService_ImpVtd.EndGetInfoForNewImport(System.IAsyncResult result) {
            return base.Channel.EndGetInfoForNewImport(result);
        }
        
        private System.IAsyncResult OnBeginGetInfoForNewImport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetInfoForNewImport(keyImp, callback, asyncState);
        }
        
        private object[] OnEndGetInfoForNewImport(System.IAsyncResult result) {
            importVtd.startTable.InfoForNewImport retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetInfoForNewImport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInfoForNewImportCompleted(object state) {
            if ((this.GetInfoForNewImportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInfoForNewImportCompleted(this, new GetInfoForNewImportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInfoForNewImportAsync(string keyImp) {
            this.GetInfoForNewImportAsync(keyImp, null);
        }
        
        public void GetInfoForNewImportAsync(string keyImp, object userState) {
            if ((this.onBeginGetInfoForNewImportDelegate == null)) {
                this.onBeginGetInfoForNewImportDelegate = new BeginOperationDelegate(this.OnBeginGetInfoForNewImport);
            }
            if ((this.onEndGetInfoForNewImportDelegate == null)) {
                this.onEndGetInfoForNewImportDelegate = new EndOperationDelegate(this.OnEndGetInfoForNewImport);
            }
            if ((this.onGetInfoForNewImportCompletedDelegate == null)) {
                this.onGetInfoForNewImportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInfoForNewImportCompleted);
            }
            base.InvokeAsync(this.onBeginGetInfoForNewImportDelegate, new object[] {
                        keyImp}, this.onEndGetInfoForNewImportDelegate, this.onGetInfoForNewImportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetDBDefect_ListFile(string keyImp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDBDefect_ListFile(keyImp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetDBDefectFile importVtd.startTable.IoraWCFService_ImpVtd.EndGetDBDefect_ListFile(System.IAsyncResult result) {
            return base.Channel.EndGetDBDefect_ListFile(result);
        }
        
        private System.IAsyncResult OnBeginGetDBDefect_ListFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetDBDefect_ListFile(keyImp, callback, asyncState);
        }
        
        private object[] OnEndGetDBDefect_ListFile(System.IAsyncResult result) {
            importVtd.startTable.GetDBDefectFile retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetDBDefect_ListFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDBDefect_ListFileCompleted(object state) {
            if ((this.GetDBDefect_ListFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDBDefect_ListFileCompleted(this, new GetDBDefect_ListFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDBDefect_ListFileAsync(string keyImp) {
            this.GetDBDefect_ListFileAsync(keyImp, null);
        }
        
        public void GetDBDefect_ListFileAsync(string keyImp, object userState) {
            if ((this.onBeginGetDBDefect_ListFileDelegate == null)) {
                this.onBeginGetDBDefect_ListFileDelegate = new BeginOperationDelegate(this.OnBeginGetDBDefect_ListFile);
            }
            if ((this.onEndGetDBDefect_ListFileDelegate == null)) {
                this.onEndGetDBDefect_ListFileDelegate = new EndOperationDelegate(this.OnEndGetDBDefect_ListFile);
            }
            if ((this.onGetDBDefect_ListFileCompletedDelegate == null)) {
                this.onGetDBDefect_ListFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDBDefect_ListFileCompleted);
            }
            base.InvokeAsync(this.onBeginGetDBDefect_ListFileDelegate, new object[] {
                        keyImp}, this.onEndGetDBDefect_ListFileDelegate, this.onGetDBDefect_ListFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetDbDefectMaping(string keyImp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDbDefectMaping(keyImp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetDBDefectMaping importVtd.startTable.IoraWCFService_ImpVtd.EndGetDbDefectMaping(System.IAsyncResult result) {
            return base.Channel.EndGetDbDefectMaping(result);
        }
        
        private System.IAsyncResult OnBeginGetDbDefectMaping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetDbDefectMaping(keyImp, callback, asyncState);
        }
        
        private object[] OnEndGetDbDefectMaping(System.IAsyncResult result) {
            importVtd.startTable.GetDBDefectMaping retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetDbDefectMaping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDbDefectMapingCompleted(object state) {
            if ((this.GetDbDefectMapingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDbDefectMapingCompleted(this, new GetDbDefectMapingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDbDefectMapingAsync(string keyImp) {
            this.GetDbDefectMapingAsync(keyImp, null);
        }
        
        public void GetDbDefectMapingAsync(string keyImp, object userState) {
            if ((this.onBeginGetDbDefectMapingDelegate == null)) {
                this.onBeginGetDbDefectMapingDelegate = new BeginOperationDelegate(this.OnBeginGetDbDefectMaping);
            }
            if ((this.onEndGetDbDefectMapingDelegate == null)) {
                this.onEndGetDbDefectMapingDelegate = new EndOperationDelegate(this.OnEndGetDbDefectMaping);
            }
            if ((this.onGetDbDefectMapingCompletedDelegate == null)) {
                this.onGetDbDefectMapingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDbDefectMapingCompleted);
            }
            base.InvokeAsync(this.onBeginGetDbDefectMapingDelegate, new object[] {
                        keyImp}, this.onEndGetDbDefectMapingDelegate, this.onGetDbDefectMapingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginDeleteMapingDict(string keyMap, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteMapingDict(keyMap, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndDeleteMapingDict(System.IAsyncResult result) {
            return base.Channel.EndDeleteMapingDict(result);
        }
        
        private System.IAsyncResult OnBeginDeleteMapingDict(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyMap = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginDeleteMapingDict(keyMap, callback, asyncState);
        }
        
        private object[] OnEndDeleteMapingDict(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndDeleteMapingDict(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteMapingDictCompleted(object state) {
            if ((this.DeleteMapingDictCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteMapingDictCompleted(this, new DeleteMapingDictCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteMapingDictAsync(string keyMap) {
            this.DeleteMapingDictAsync(keyMap, null);
        }
        
        public void DeleteMapingDictAsync(string keyMap, object userState) {
            if ((this.onBeginDeleteMapingDictDelegate == null)) {
                this.onBeginDeleteMapingDictDelegate = new BeginOperationDelegate(this.OnBeginDeleteMapingDict);
            }
            if ((this.onEndDeleteMapingDictDelegate == null)) {
                this.onEndDeleteMapingDictDelegate = new EndOperationDelegate(this.OnEndDeleteMapingDict);
            }
            if ((this.onDeleteMapingDictCompletedDelegate == null)) {
                this.onDeleteMapingDictCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteMapingDictCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteMapingDictDelegate, new object[] {
                        keyMap}, this.onEndDeleteMapingDictDelegate, this.onDeleteMapingDictCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginSaveMapingDict(importVtd.startTable.GetDBDefectMapingList[] dBDefectMapingList, string keyImp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginSaveMapingDict(dBDefectMapingList, keyImp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndSaveMapingDict(System.IAsyncResult result) {
            return base.Channel.EndSaveMapingDict(result);
        }
        
        private System.IAsyncResult OnBeginSaveMapingDict(object[] inValues, System.AsyncCallback callback, object asyncState) {
            importVtd.startTable.GetDBDefectMapingList[] dBDefectMapingList = ((importVtd.startTable.GetDBDefectMapingList[])(inValues[0]));
            string keyImp = ((string)(inValues[1]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginSaveMapingDict(dBDefectMapingList, keyImp, callback, asyncState);
        }
        
        private object[] OnEndSaveMapingDict(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndSaveMapingDict(result);
            return new object[] {
                    retVal};
        }
        
        private void OnSaveMapingDictCompleted(object state) {
            if ((this.SaveMapingDictCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.SaveMapingDictCompleted(this, new SaveMapingDictCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void SaveMapingDictAsync(importVtd.startTable.GetDBDefectMapingList[] dBDefectMapingList, string keyImp) {
            this.SaveMapingDictAsync(dBDefectMapingList, keyImp, null);
        }
        
        public void SaveMapingDictAsync(importVtd.startTable.GetDBDefectMapingList[] dBDefectMapingList, string keyImp, object userState) {
            if ((this.onBeginSaveMapingDictDelegate == null)) {
                this.onBeginSaveMapingDictDelegate = new BeginOperationDelegate(this.OnBeginSaveMapingDict);
            }
            if ((this.onEndSaveMapingDictDelegate == null)) {
                this.onEndSaveMapingDictDelegate = new EndOperationDelegate(this.OnEndSaveMapingDict);
            }
            if ((this.onSaveMapingDictCompletedDelegate == null)) {
                this.onSaveMapingDictCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnSaveMapingDictCompleted);
            }
            base.InvokeAsync(this.onBeginSaveMapingDictDelegate, new object[] {
                        dBDefectMapingList,
                        keyImp}, this.onEndSaveMapingDictDelegate, this.onSaveMapingDictCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGet_ImpVTD_Making_One(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet_ImpVTD_Making_One(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.ImpVTD_Making importVtd.startTable.IoraWCFService_ImpVtd.EndGet_ImpVTD_Making_One(System.IAsyncResult result) {
            return base.Channel.EndGet_ImpVTD_Making_One(result);
        }
        
        private System.IAsyncResult OnBeginGet_ImpVTD_Making_One(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGet_ImpVTD_Making_One(key, callback, asyncState);
        }
        
        private object[] OnEndGet_ImpVTD_Making_One(System.IAsyncResult result) {
            importVtd.startTable.ImpVTD_Making retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGet_ImpVTD_Making_One(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet_ImpVTD_Making_OneCompleted(object state) {
            if ((this.Get_ImpVTD_Making_OneCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get_ImpVTD_Making_OneCompleted(this, new Get_ImpVTD_Making_OneCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get_ImpVTD_Making_OneAsync(string key) {
            this.Get_ImpVTD_Making_OneAsync(key, null);
        }
        
        public void Get_ImpVTD_Making_OneAsync(string key, object userState) {
            if ((this.onBeginGet_ImpVTD_Making_OneDelegate == null)) {
                this.onBeginGet_ImpVTD_Making_OneDelegate = new BeginOperationDelegate(this.OnBeginGet_ImpVTD_Making_One);
            }
            if ((this.onEndGet_ImpVTD_Making_OneDelegate == null)) {
                this.onEndGet_ImpVTD_Making_OneDelegate = new EndOperationDelegate(this.OnEndGet_ImpVTD_Making_One);
            }
            if ((this.onGet_ImpVTD_Making_OneCompletedDelegate == null)) {
                this.onGet_ImpVTD_Making_OneCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet_ImpVTD_Making_OneCompleted);
            }
            base.InvokeAsync(this.onBeginGet_ImpVTD_Making_OneDelegate, new object[] {
                        key}, this.onEndGet_ImpVTD_Making_OneDelegate, this.onGet_ImpVTD_Making_OneCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGet_MG_ImpVtd(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet_MG_ImpVtd(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.MG_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndGet_MG_ImpVtd(System.IAsyncResult result) {
            return base.Channel.EndGet_MG_ImpVtd(result);
        }
        
        private System.IAsyncResult OnBeginGet_MG_ImpVtd(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGet_MG_ImpVtd(callback, asyncState);
        }
        
        private object[] OnEndGet_MG_ImpVtd(System.IAsyncResult result) {
            importVtd.startTable.MG_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGet_MG_ImpVtd(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet_MG_ImpVtdCompleted(object state) {
            if ((this.Get_MG_ImpVtdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get_MG_ImpVtdCompleted(this, new Get_MG_ImpVtdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get_MG_ImpVtdAsync() {
            this.Get_MG_ImpVtdAsync(null);
        }
        
        public void Get_MG_ImpVtdAsync(object userState) {
            if ((this.onBeginGet_MG_ImpVtdDelegate == null)) {
                this.onBeginGet_MG_ImpVtdDelegate = new BeginOperationDelegate(this.OnBeginGet_MG_ImpVtd);
            }
            if ((this.onEndGet_MG_ImpVtdDelegate == null)) {
                this.onEndGet_MG_ImpVtdDelegate = new EndOperationDelegate(this.OnEndGet_MG_ImpVtd);
            }
            if ((this.onGet_MG_ImpVtdCompletedDelegate == null)) {
                this.onGet_MG_ImpVtdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet_MG_ImpVtdCompleted);
            }
            base.InvokeAsync(this.onBeginGet_MG_ImpVtdDelegate, null, this.onEndGet_MG_ImpVtdDelegate, this.onGet_MG_ImpVtdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetThreadsForMg(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetThreadsForMg(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.ThreadForMgImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndGetThreadsForMg(System.IAsyncResult result) {
            return base.Channel.EndGetThreadsForMg(result);
        }
        
        private System.IAsyncResult OnBeginGetThreadsForMg(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetThreadsForMg(key, callback, asyncState);
        }
        
        private object[] OnEndGetThreadsForMg(System.IAsyncResult result) {
            importVtd.startTable.ThreadForMgImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetThreadsForMg(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetThreadsForMgCompleted(object state) {
            if ((this.GetThreadsForMgCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetThreadsForMgCompleted(this, new GetThreadsForMgCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetThreadsForMgAsync(string key) {
            this.GetThreadsForMgAsync(key, null);
        }
        
        public void GetThreadsForMgAsync(string key, object userState) {
            if ((this.onBeginGetThreadsForMgDelegate == null)) {
                this.onBeginGetThreadsForMgDelegate = new BeginOperationDelegate(this.OnBeginGetThreadsForMg);
            }
            if ((this.onEndGetThreadsForMgDelegate == null)) {
                this.onEndGetThreadsForMgDelegate = new EndOperationDelegate(this.OnEndGetThreadsForMg);
            }
            if ((this.onGetThreadsForMgCompletedDelegate == null)) {
                this.onGetThreadsForMgCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetThreadsForMgCompleted);
            }
            base.InvokeAsync(this.onBeginGetThreadsForMgDelegate, new object[] {
                        key}, this.onEndGetThreadsForMgDelegate, this.onGetThreadsForMgCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetCountVtdForThread(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetCountVtdForThread(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.CountVtdSec importVtd.startTable.IoraWCFService_ImpVtd.EndGetCountVtdForThread(System.IAsyncResult result) {
            return base.Channel.EndGetCountVtdForThread(result);
        }
        
        private System.IAsyncResult OnBeginGetCountVtdForThread(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetCountVtdForThread(key, callback, asyncState);
        }
        
        private object[] OnEndGetCountVtdForThread(System.IAsyncResult result) {
            importVtd.startTable.CountVtdSec retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetCountVtdForThread(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetCountVtdForThreadCompleted(object state) {
            if ((this.GetCountVtdForThreadCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetCountVtdForThreadCompleted(this, new GetCountVtdForThreadCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetCountVtdForThreadAsync(string key) {
            this.GetCountVtdForThreadAsync(key, null);
        }
        
        public void GetCountVtdForThreadAsync(string key, object userState) {
            if ((this.onBeginGetCountVtdForThreadDelegate == null)) {
                this.onBeginGetCountVtdForThreadDelegate = new BeginOperationDelegate(this.OnBeginGetCountVtdForThread);
            }
            if ((this.onEndGetCountVtdForThreadDelegate == null)) {
                this.onEndGetCountVtdForThreadDelegate = new EndOperationDelegate(this.OnEndGetCountVtdForThread);
            }
            if ((this.onGetCountVtdForThreadCompletedDelegate == null)) {
                this.onGetCountVtdForThreadCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetCountVtdForThreadCompleted);
            }
            base.InvokeAsync(this.onBeginGetCountVtdForThreadDelegate, new object[] {
                        key}, this.onEndGetCountVtdForThreadDelegate, this.onGetCountVtdForThreadCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetVTDSec_List(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVTDSec_List(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.VtdSec importVtd.startTable.IoraWCFService_ImpVtd.EndGetVTDSec_List(System.IAsyncResult result) {
            return base.Channel.EndGetVTDSec_List(result);
        }
        
        private System.IAsyncResult OnBeginGetVTDSec_List(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetVTDSec_List(key, callback, asyncState);
        }
        
        private object[] OnEndGetVTDSec_List(System.IAsyncResult result) {
            importVtd.startTable.VtdSec retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetVTDSec_List(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVTDSec_ListCompleted(object state) {
            if ((this.GetVTDSec_ListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVTDSec_ListCompleted(this, new GetVTDSec_ListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVTDSec_ListAsync(string key) {
            this.GetVTDSec_ListAsync(key, null);
        }
        
        public void GetVTDSec_ListAsync(string key, object userState) {
            if ((this.onBeginGetVTDSec_ListDelegate == null)) {
                this.onBeginGetVTDSec_ListDelegate = new BeginOperationDelegate(this.OnBeginGetVTDSec_List);
            }
            if ((this.onEndGetVTDSec_ListDelegate == null)) {
                this.onEndGetVTDSec_ListDelegate = new EndOperationDelegate(this.OnEndGetVTDSec_List);
            }
            if ((this.onGetVTDSec_ListCompletedDelegate == null)) {
                this.onGetVTDSec_ListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVTDSec_ListCompleted);
            }
            base.InvokeAsync(this.onBeginGetVTDSec_ListDelegate, new object[] {
                        key}, this.onEndGetVTDSec_ListDelegate, this.onGetVTDSec_ListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetVTDSec_Param(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVTDSec_Param(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.VtdSecParam importVtd.startTable.IoraWCFService_ImpVtd.EndGetVTDSec_Param(System.IAsyncResult result) {
            return base.Channel.EndGetVTDSec_Param(result);
        }
        
        private System.IAsyncResult OnBeginGetVTDSec_Param(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetVTDSec_Param(key, callback, asyncState);
        }
        
        private object[] OnEndGetVTDSec_Param(System.IAsyncResult result) {
            importVtd.startTable.VtdSecParam retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetVTDSec_Param(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVTDSec_ParamCompleted(object state) {
            if ((this.GetVTDSec_ParamCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVTDSec_ParamCompleted(this, new GetVTDSec_ParamCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVTDSec_ParamAsync(string key) {
            this.GetVTDSec_ParamAsync(key, null);
        }
        
        public void GetVTDSec_ParamAsync(string key, object userState) {
            if ((this.onBeginGetVTDSec_ParamDelegate == null)) {
                this.onBeginGetVTDSec_ParamDelegate = new BeginOperationDelegate(this.OnBeginGetVTDSec_Param);
            }
            if ((this.onEndGetVTDSec_ParamDelegate == null)) {
                this.onEndGetVTDSec_ParamDelegate = new EndOperationDelegate(this.OnEndGetVTDSec_Param);
            }
            if ((this.onGetVTDSec_ParamCompletedDelegate == null)) {
                this.onGetVTDSec_ParamCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVTDSec_ParamCompleted);
            }
            base.InvokeAsync(this.onBeginGetVTDSec_ParamDelegate, new object[] {
                        key}, this.onEndGetVTDSec_ParamDelegate, this.onGetVTDSec_ParamCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetVTD_data_AllList(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVTD_data_AllList(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.VtdNumberDogAllList importVtd.startTable.IoraWCFService_ImpVtd.EndGetVTD_data_AllList(System.IAsyncResult result) {
            return base.Channel.EndGetVTD_data_AllList(result);
        }
        
        private System.IAsyncResult OnBeginGetVTD_data_AllList(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetVTD_data_AllList(key, callback, asyncState);
        }
        
        private object[] OnEndGetVTD_data_AllList(System.IAsyncResult result) {
            importVtd.startTable.VtdNumberDogAllList retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetVTD_data_AllList(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVTD_data_AllListCompleted(object state) {
            if ((this.GetVTD_data_AllListCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVTD_data_AllListCompleted(this, new GetVTD_data_AllListCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVTD_data_AllListAsync(string key) {
            this.GetVTD_data_AllListAsync(key, null);
        }
        
        public void GetVTD_data_AllListAsync(string key, object userState) {
            if ((this.onBeginGetVTD_data_AllListDelegate == null)) {
                this.onBeginGetVTD_data_AllListDelegate = new BeginOperationDelegate(this.OnBeginGetVTD_data_AllList);
            }
            if ((this.onEndGetVTD_data_AllListDelegate == null)) {
                this.onEndGetVTD_data_AllListDelegate = new EndOperationDelegate(this.OnEndGetVTD_data_AllList);
            }
            if ((this.onGetVTD_data_AllListCompletedDelegate == null)) {
                this.onGetVTD_data_AllListCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVTD_data_AllListCompleted);
            }
            base.InvokeAsync(this.onBeginGetVTD_data_AllListDelegate, new object[] {
                        key}, this.onEndGetVTD_data_AllListDelegate, this.onGetVTD_data_AllListCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGet_DictDefectXSL(string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet_DictDefectXSL(fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.DictDefectXSL_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndGet_DictDefectXSL(System.IAsyncResult result) {
            return base.Channel.EndGet_DictDefectXSL(result);
        }
        
        private System.IAsyncResult OnBeginGet_DictDefectXSL(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string fileName = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGet_DictDefectXSL(fileName, callback, asyncState);
        }
        
        private object[] OnEndGet_DictDefectXSL(System.IAsyncResult result) {
            importVtd.startTable.DictDefectXSL_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGet_DictDefectXSL(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet_DictDefectXSLCompleted(object state) {
            if ((this.Get_DictDefectXSLCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get_DictDefectXSLCompleted(this, new Get_DictDefectXSLCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get_DictDefectXSLAsync(string fileName) {
            this.Get_DictDefectXSLAsync(fileName, null);
        }
        
        public void Get_DictDefectXSLAsync(string fileName, object userState) {
            if ((this.onBeginGet_DictDefectXSLDelegate == null)) {
                this.onBeginGet_DictDefectXSLDelegate = new BeginOperationDelegate(this.OnBeginGet_DictDefectXSL);
            }
            if ((this.onEndGet_DictDefectXSLDelegate == null)) {
                this.onEndGet_DictDefectXSLDelegate = new EndOperationDelegate(this.OnEndGet_DictDefectXSL);
            }
            if ((this.onGet_DictDefectXSLCompletedDelegate == null)) {
                this.onGet_DictDefectXSLCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet_DictDefectXSLCompleted);
            }
            base.InvokeAsync(this.onBeginGet_DictDefectXSLDelegate, new object[] {
                        fileName}, this.onEndGet_DictDefectXSLDelegate, this.onGet_DictDefectXSLCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetVTD_Data_Params(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVTD_Data_Params(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.VtdDogovorParams importVtd.startTable.IoraWCFService_ImpVtd.EndGetVTD_Data_Params(System.IAsyncResult result) {
            return base.Channel.EndGetVTD_Data_Params(result);
        }
        
        private System.IAsyncResult OnBeginGetVTD_Data_Params(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetVTD_Data_Params(key, callback, asyncState);
        }
        
        private object[] OnEndGetVTD_Data_Params(System.IAsyncResult result) {
            importVtd.startTable.VtdDogovorParams retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetVTD_Data_Params(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVTD_Data_ParamsCompleted(object state) {
            if ((this.GetVTD_Data_ParamsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVTD_Data_ParamsCompleted(this, new GetVTD_Data_ParamsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVTD_Data_ParamsAsync(string key) {
            this.GetVTD_Data_ParamsAsync(key, null);
        }
        
        public void GetVTD_Data_ParamsAsync(string key, object userState) {
            if ((this.onBeginGetVTD_Data_ParamsDelegate == null)) {
                this.onBeginGetVTD_Data_ParamsDelegate = new BeginOperationDelegate(this.OnBeginGetVTD_Data_Params);
            }
            if ((this.onEndGetVTD_Data_ParamsDelegate == null)) {
                this.onEndGetVTD_Data_ParamsDelegate = new EndOperationDelegate(this.OnEndGetVTD_Data_Params);
            }
            if ((this.onGetVTD_Data_ParamsCompletedDelegate == null)) {
                this.onGetVTD_Data_ParamsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVTD_Data_ParamsCompleted);
            }
            base.InvokeAsync(this.onBeginGetVTD_Data_ParamsDelegate, new object[] {
                        key}, this.onEndGetVTD_Data_ParamsDelegate, this.onGetVTD_Data_ParamsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetLeftTableData(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLeftTableData(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.VtdTubeBaza importVtd.startTable.IoraWCFService_ImpVtd.EndGetLeftTableData(System.IAsyncResult result) {
            return base.Channel.EndGetLeftTableData(result);
        }
        
        private System.IAsyncResult OnBeginGetLeftTableData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetLeftTableData(key, callback, asyncState);
        }
        
        private object[] OnEndGetLeftTableData(System.IAsyncResult result) {
            importVtd.startTable.VtdTubeBaza retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetLeftTableData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLeftTableDataCompleted(object state) {
            if ((this.GetLeftTableDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLeftTableDataCompleted(this, new GetLeftTableDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLeftTableDataAsync(string key) {
            this.GetLeftTableDataAsync(key, null);
        }
        
        public void GetLeftTableDataAsync(string key, object userState) {
            if ((this.onBeginGetLeftTableDataDelegate == null)) {
                this.onBeginGetLeftTableDataDelegate = new BeginOperationDelegate(this.OnBeginGetLeftTableData);
            }
            if ((this.onEndGetLeftTableDataDelegate == null)) {
                this.onEndGetLeftTableDataDelegate = new EndOperationDelegate(this.OnEndGetLeftTableData);
            }
            if ((this.onGetLeftTableDataCompletedDelegate == null)) {
                this.onGetLeftTableDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLeftTableDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetLeftTableDataDelegate, new object[] {
                        key}, this.onEndGetLeftTableDataDelegate, this.onGetLeftTableDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetRightTableData(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRightTableData(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.VtdTubeBaza importVtd.startTable.IoraWCFService_ImpVtd.EndGetRightTableData(System.IAsyncResult result) {
            return base.Channel.EndGetRightTableData(result);
        }
        
        private System.IAsyncResult OnBeginGetRightTableData(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetRightTableData(key, callback, asyncState);
        }
        
        private object[] OnEndGetRightTableData(System.IAsyncResult result) {
            importVtd.startTable.VtdTubeBaza retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetRightTableData(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRightTableDataCompleted(object state) {
            if ((this.GetRightTableDataCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRightTableDataCompleted(this, new GetRightTableDataCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRightTableDataAsync(string key) {
            this.GetRightTableDataAsync(key, null);
        }
        
        public void GetRightTableDataAsync(string key, object userState) {
            if ((this.onBeginGetRightTableDataDelegate == null)) {
                this.onBeginGetRightTableDataDelegate = new BeginOperationDelegate(this.OnBeginGetRightTableData);
            }
            if ((this.onEndGetRightTableDataDelegate == null)) {
                this.onEndGetRightTableDataDelegate = new EndOperationDelegate(this.OnEndGetRightTableData);
            }
            if ((this.onGetRightTableDataCompletedDelegate == null)) {
                this.onGetRightTableDataCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRightTableDataCompleted);
            }
            base.InvokeAsync(this.onBeginGetRightTableDataDelegate, new object[] {
                        key}, this.onEndGetRightTableDataDelegate, this.onGetRightTableDataCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetLeftDefectListTube(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetLeftDefectListTube(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.DefectListTube[] importVtd.startTable.IoraWCFService_ImpVtd.EndGetLeftDefectListTube(System.IAsyncResult result) {
            return base.Channel.EndGetLeftDefectListTube(result);
        }
        
        private System.IAsyncResult OnBeginGetLeftDefectListTube(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetLeftDefectListTube(key, callback, asyncState);
        }
        
        private object[] OnEndGetLeftDefectListTube(System.IAsyncResult result) {
            importVtd.startTable.DefectListTube[] retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetLeftDefectListTube(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetLeftDefectListTubeCompleted(object state) {
            if ((this.GetLeftDefectListTubeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetLeftDefectListTubeCompleted(this, new GetLeftDefectListTubeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetLeftDefectListTubeAsync(string key) {
            this.GetLeftDefectListTubeAsync(key, null);
        }
        
        public void GetLeftDefectListTubeAsync(string key, object userState) {
            if ((this.onBeginGetLeftDefectListTubeDelegate == null)) {
                this.onBeginGetLeftDefectListTubeDelegate = new BeginOperationDelegate(this.OnBeginGetLeftDefectListTube);
            }
            if ((this.onEndGetLeftDefectListTubeDelegate == null)) {
                this.onEndGetLeftDefectListTubeDelegate = new EndOperationDelegate(this.OnEndGetLeftDefectListTube);
            }
            if ((this.onGetLeftDefectListTubeCompletedDelegate == null)) {
                this.onGetLeftDefectListTubeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetLeftDefectListTubeCompleted);
            }
            base.InvokeAsync(this.onBeginGetLeftDefectListTubeDelegate, new object[] {
                        key}, this.onEndGetLeftDefectListTubeDelegate, this.onGetLeftDefectListTubeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetRightDefectListTube(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetRightDefectListTube(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.DefectListTubeRight[] importVtd.startTable.IoraWCFService_ImpVtd.EndGetRightDefectListTube(System.IAsyncResult result) {
            return base.Channel.EndGetRightDefectListTube(result);
        }
        
        private System.IAsyncResult OnBeginGetRightDefectListTube(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetRightDefectListTube(key, callback, asyncState);
        }
        
        private object[] OnEndGetRightDefectListTube(System.IAsyncResult result) {
            importVtd.startTable.DefectListTubeRight[] retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetRightDefectListTube(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetRightDefectListTubeCompleted(object state) {
            if ((this.GetRightDefectListTubeCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetRightDefectListTubeCompleted(this, new GetRightDefectListTubeCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetRightDefectListTubeAsync(string key) {
            this.GetRightDefectListTubeAsync(key, null);
        }
        
        public void GetRightDefectListTubeAsync(string key, object userState) {
            if ((this.onBeginGetRightDefectListTubeDelegate == null)) {
                this.onBeginGetRightDefectListTubeDelegate = new BeginOperationDelegate(this.OnBeginGetRightDefectListTube);
            }
            if ((this.onEndGetRightDefectListTubeDelegate == null)) {
                this.onEndGetRightDefectListTubeDelegate = new EndOperationDelegate(this.OnEndGetRightDefectListTube);
            }
            if ((this.onGetRightDefectListTubeCompletedDelegate == null)) {
                this.onGetRightDefectListTubeCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetRightDefectListTubeCompleted);
            }
            base.InvokeAsync(this.onBeginGetRightDefectListTubeDelegate, new object[] {
                        key}, this.onEndGetRightDefectListTubeDelegate, this.onGetRightDefectListTubeCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginVTD_MapsDicts(string ikeyImport, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginVTD_MapsDicts(ikeyImport, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndVTD_MapsDicts(System.IAsyncResult result) {
            return base.Channel.EndVTD_MapsDicts(result);
        }
        
        private System.IAsyncResult OnBeginVTD_MapsDicts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ikeyImport = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginVTD_MapsDicts(ikeyImport, callback, asyncState);
        }
        
        private object[] OnEndVTD_MapsDicts(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndVTD_MapsDicts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnVTD_MapsDictsCompleted(object state) {
            if ((this.VTD_MapsDictsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.VTD_MapsDictsCompleted(this, new VTD_MapsDictsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void VTD_MapsDictsAsync(string ikeyImport) {
            this.VTD_MapsDictsAsync(ikeyImport, null);
        }
        
        public void VTD_MapsDictsAsync(string ikeyImport, object userState) {
            if ((this.onBeginVTD_MapsDictsDelegate == null)) {
                this.onBeginVTD_MapsDictsDelegate = new BeginOperationDelegate(this.OnBeginVTD_MapsDicts);
            }
            if ((this.onEndVTD_MapsDictsDelegate == null)) {
                this.onEndVTD_MapsDictsDelegate = new EndOperationDelegate(this.OnEndVTD_MapsDicts);
            }
            if ((this.onVTD_MapsDictsCompletedDelegate == null)) {
                this.onVTD_MapsDictsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnVTD_MapsDictsCompleted);
            }
            base.InvokeAsync(this.onBeginVTD_MapsDictsDelegate, new object[] {
                        ikeyImport}, this.onEndVTD_MapsDictsDelegate, this.onVTD_MapsDictsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginMapsDicts(string ikeyImport, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginMapsDicts(ikeyImport, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndMapsDicts(System.IAsyncResult result) {
            return base.Channel.EndMapsDicts(result);
        }
        
        private System.IAsyncResult OnBeginMapsDicts(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string ikeyImport = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginMapsDicts(ikeyImport, callback, asyncState);
        }
        
        private object[] OnEndMapsDicts(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndMapsDicts(result);
            return new object[] {
                    retVal};
        }
        
        private void OnMapsDictsCompleted(object state) {
            if ((this.MapsDictsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.MapsDictsCompleted(this, new MapsDictsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void MapsDictsAsync(string ikeyImport) {
            this.MapsDictsAsync(ikeyImport, null);
        }
        
        public void MapsDictsAsync(string ikeyImport, object userState) {
            if ((this.onBeginMapsDictsDelegate == null)) {
                this.onBeginMapsDictsDelegate = new BeginOperationDelegate(this.OnBeginMapsDicts);
            }
            if ((this.onEndMapsDictsDelegate == null)) {
                this.onEndMapsDictsDelegate = new EndOperationDelegate(this.OnEndMapsDicts);
            }
            if ((this.onMapsDictsCompletedDelegate == null)) {
                this.onMapsDictsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnMapsDictsCompleted);
            }
            base.InvokeAsync(this.onBeginMapsDictsDelegate, new object[] {
                        ikeyImport}, this.onEndMapsDictsDelegate, this.onMapsDictsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetvtdfile_param(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetvtdfile_param(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.VtdfileParamTable[] importVtd.startTable.IoraWCFService_ImpVtd.EndGetvtdfile_param(System.IAsyncResult result) {
            return base.Channel.EndGetvtdfile_param(result);
        }
        
        private System.IAsyncResult OnBeginGetvtdfile_param(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetvtdfile_param(tmp, callback, asyncState);
        }
        
        private object[] OnEndGetvtdfile_param(System.IAsyncResult result) {
            importVtd.startTable.VtdfileParamTable[] retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetvtdfile_param(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetvtdfile_paramCompleted(object state) {
            if ((this.Getvtdfile_paramCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Getvtdfile_paramCompleted(this, new Getvtdfile_paramCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Getvtdfile_paramAsync(string tmp) {
            this.Getvtdfile_paramAsync(tmp, null);
        }
        
        public void Getvtdfile_paramAsync(string tmp, object userState) {
            if ((this.onBeginGetvtdfile_paramDelegate == null)) {
                this.onBeginGetvtdfile_paramDelegate = new BeginOperationDelegate(this.OnBeginGetvtdfile_param);
            }
            if ((this.onEndGetvtdfile_paramDelegate == null)) {
                this.onEndGetvtdfile_paramDelegate = new EndOperationDelegate(this.OnEndGetvtdfile_param);
            }
            if ((this.onGetvtdfile_paramCompletedDelegate == null)) {
                this.onGetvtdfile_paramCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetvtdfile_paramCompleted);
            }
            base.InvokeAsync(this.onBeginGetvtdfile_paramDelegate, new object[] {
                        tmp}, this.onEndGetvtdfile_paramDelegate, this.onGetvtdfile_paramCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginLoad_VTDXLSfile(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoad_VTDXLSfile(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string importVtd.startTable.IoraWCFService_ImpVtd.EndLoad_VTDXLSfile(System.IAsyncResult result) {
            return base.Channel.EndLoad_VTDXLSfile(result);
        }
        
        private System.IAsyncResult OnBeginLoad_VTDXLSfile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginLoad_VTDXLSfile(tmp, callback, asyncState);
        }
        
        private object[] OnEndLoad_VTDXLSfile(System.IAsyncResult result) {
            string retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndLoad_VTDXLSfile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoad_VTDXLSfileCompleted(object state) {
            if ((this.Load_VTDXLSfileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Load_VTDXLSfileCompleted(this, new Load_VTDXLSfileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Load_VTDXLSfileAsync(string tmp) {
            this.Load_VTDXLSfileAsync(tmp, null);
        }
        
        public void Load_VTDXLSfileAsync(string tmp, object userState) {
            if ((this.onBeginLoad_VTDXLSfileDelegate == null)) {
                this.onBeginLoad_VTDXLSfileDelegate = new BeginOperationDelegate(this.OnBeginLoad_VTDXLSfile);
            }
            if ((this.onEndLoad_VTDXLSfileDelegate == null)) {
                this.onEndLoad_VTDXLSfileDelegate = new EndOperationDelegate(this.OnEndLoad_VTDXLSfile);
            }
            if ((this.onLoad_VTDXLSfileCompletedDelegate == null)) {
                this.onLoad_VTDXLSfileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoad_VTDXLSfileCompleted);
            }
            base.InvokeAsync(this.onBeginLoad_VTDXLSfileDelegate, new object[] {
                        tmp}, this.onEndLoad_VTDXLSfileDelegate, this.onLoad_VTDXLSfileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetImpLog(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetImpLog(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.ImpLogVtd importVtd.startTable.IoraWCFService_ImpVtd.EndGetImpLog(System.IAsyncResult result) {
            return base.Channel.EndGetImpLog(result);
        }
        
        private System.IAsyncResult OnBeginGetImpLog(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetImpLog(tmp, callback, asyncState);
        }
        
        private object[] OnEndGetImpLog(System.IAsyncResult result) {
            importVtd.startTable.ImpLogVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetImpLog(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetImpLogCompleted(object state) {
            if ((this.GetImpLogCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetImpLogCompleted(this, new GetImpLogCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetImpLogAsync(string tmp) {
            this.GetImpLogAsync(tmp, null);
        }
        
        public void GetImpLogAsync(string tmp, object userState) {
            if ((this.onBeginGetImpLogDelegate == null)) {
                this.onBeginGetImpLogDelegate = new BeginOperationDelegate(this.OnBeginGetImpLog);
            }
            if ((this.onEndGetImpLogDelegate == null)) {
                this.onEndGetImpLogDelegate = new EndOperationDelegate(this.OnEndGetImpLog);
            }
            if ((this.onGetImpLogCompletedDelegate == null)) {
                this.onGetImpLogCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetImpLogCompleted);
            }
            base.InvokeAsync(this.onBeginGetImpLogDelegate, new object[] {
                        tmp}, this.onEndGetImpLogDelegate, this.onGetImpLogCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginApplyKeyMap(string tmp, string arrayKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginApplyKeyMap(tmp, arrayKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndApplyKeyMap(System.IAsyncResult result) {
            return base.Channel.EndApplyKeyMap(result);
        }
        
        private System.IAsyncResult OnBeginApplyKeyMap(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            string arrayKey = ((string)(inValues[1]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginApplyKeyMap(tmp, arrayKey, callback, asyncState);
        }
        
        private object[] OnEndApplyKeyMap(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndApplyKeyMap(result);
            return new object[] {
                    retVal};
        }
        
        private void OnApplyKeyMapCompleted(object state) {
            if ((this.ApplyKeyMapCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ApplyKeyMapCompleted(this, new ApplyKeyMapCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ApplyKeyMapAsync(string tmp, string arrayKey) {
            this.ApplyKeyMapAsync(tmp, arrayKey, null);
        }
        
        public void ApplyKeyMapAsync(string tmp, string arrayKey, object userState) {
            if ((this.onBeginApplyKeyMapDelegate == null)) {
                this.onBeginApplyKeyMapDelegate = new BeginOperationDelegate(this.OnBeginApplyKeyMap);
            }
            if ((this.onEndApplyKeyMapDelegate == null)) {
                this.onEndApplyKeyMapDelegate = new EndOperationDelegate(this.OnEndApplyKeyMap);
            }
            if ((this.onApplyKeyMapCompletedDelegate == null)) {
                this.onApplyKeyMapCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnApplyKeyMapCompleted);
            }
            base.InvokeAsync(this.onBeginApplyKeyMapDelegate, new object[] {
                        tmp,
                        arrayKey}, this.onEndApplyKeyMapDelegate, this.onApplyKeyMapCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGet_TubeJournal(string keyImp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGet_TubeJournal(keyImp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetTubeJournal importVtd.startTable.IoraWCFService_ImpVtd.EndGet_TubeJournal(System.IAsyncResult result) {
            return base.Channel.EndGet_TubeJournal(result);
        }
        
        private System.IAsyncResult OnBeginGet_TubeJournal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGet_TubeJournal(keyImp, callback, asyncState);
        }
        
        private object[] OnEndGet_TubeJournal(System.IAsyncResult result) {
            importVtd.startTable.GetTubeJournal retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGet_TubeJournal(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGet_TubeJournalCompleted(object state) {
            if ((this.Get_TubeJournalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Get_TubeJournalCompleted(this, new Get_TubeJournalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Get_TubeJournalAsync(string keyImp) {
            this.Get_TubeJournalAsync(keyImp, null);
        }
        
        public void Get_TubeJournalAsync(string keyImp, object userState) {
            if ((this.onBeginGet_TubeJournalDelegate == null)) {
                this.onBeginGet_TubeJournalDelegate = new BeginOperationDelegate(this.OnBeginGet_TubeJournal);
            }
            if ((this.onEndGet_TubeJournalDelegate == null)) {
                this.onEndGet_TubeJournalDelegate = new EndOperationDelegate(this.OnEndGet_TubeJournal);
            }
            if ((this.onGet_TubeJournalCompletedDelegate == null)) {
                this.onGet_TubeJournalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGet_TubeJournalCompleted);
            }
            base.InvokeAsync(this.onBeginGet_TubeJournalDelegate, new object[] {
                        keyImp}, this.onEndGet_TubeJournalDelegate, this.onGet_TubeJournalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetInfoForVtdImport(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetInfoForVtdImport(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.InfoForVtdImportTable[] importVtd.startTable.IoraWCFService_ImpVtd.EndGetInfoForVtdImport(System.IAsyncResult result) {
            return base.Channel.EndGetInfoForVtdImport(result);
        }
        
        private System.IAsyncResult OnBeginGetInfoForVtdImport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetInfoForVtdImport(tmp, callback, asyncState);
        }
        
        private object[] OnEndGetInfoForVtdImport(System.IAsyncResult result) {
            importVtd.startTable.InfoForVtdImportTable[] retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetInfoForVtdImport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetInfoForVtdImportCompleted(object state) {
            if ((this.GetInfoForVtdImportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetInfoForVtdImportCompleted(this, new GetInfoForVtdImportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetInfoForVtdImportAsync(string tmp) {
            this.GetInfoForVtdImportAsync(tmp, null);
        }
        
        public void GetInfoForVtdImportAsync(string tmp, object userState) {
            if ((this.onBeginGetInfoForVtdImportDelegate == null)) {
                this.onBeginGetInfoForVtdImportDelegate = new BeginOperationDelegate(this.OnBeginGetInfoForVtdImport);
            }
            if ((this.onEndGetInfoForVtdImportDelegate == null)) {
                this.onEndGetInfoForVtdImportDelegate = new EndOperationDelegate(this.OnEndGetInfoForVtdImport);
            }
            if ((this.onGetInfoForVtdImportCompletedDelegate == null)) {
                this.onGetInfoForVtdImportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetInfoForVtdImportCompleted);
            }
            base.InvokeAsync(this.onBeginGetInfoForVtdImportDelegate, new object[] {
                        tmp}, this.onEndGetInfoForVtdImportDelegate, this.onGetInfoForVtdImportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginStatisticsTable(string keyImport, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginStatisticsTable(keyImport, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetStatisticsTable importVtd.startTable.IoraWCFService_ImpVtd.EndStatisticsTable(System.IAsyncResult result) {
            return base.Channel.EndStatisticsTable(result);
        }
        
        private System.IAsyncResult OnBeginStatisticsTable(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImport = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginStatisticsTable(keyImport, callback, asyncState);
        }
        
        private object[] OnEndStatisticsTable(System.IAsyncResult result) {
            importVtd.startTable.GetStatisticsTable retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndStatisticsTable(result);
            return new object[] {
                    retVal};
        }
        
        private void OnStatisticsTableCompleted(object state) {
            if ((this.StatisticsTableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.StatisticsTableCompleted(this, new StatisticsTableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void StatisticsTableAsync(string keyImport) {
            this.StatisticsTableAsync(keyImport, null);
        }
        
        public void StatisticsTableAsync(string keyImport, object userState) {
            if ((this.onBeginStatisticsTableDelegate == null)) {
                this.onBeginStatisticsTableDelegate = new BeginOperationDelegate(this.OnBeginStatisticsTable);
            }
            if ((this.onEndStatisticsTableDelegate == null)) {
                this.onEndStatisticsTableDelegate = new EndOperationDelegate(this.OnEndStatisticsTable);
            }
            if ((this.onStatisticsTableCompletedDelegate == null)) {
                this.onStatisticsTableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnStatisticsTableCompleted);
            }
            base.InvokeAsync(this.onBeginStatisticsTableDelegate, new object[] {
                        keyImport}, this.onEndStatisticsTableDelegate, this.onStatisticsTableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginImportVTDLaunches(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportVTDLaunches(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndImportVTDLaunches(System.IAsyncResult result) {
            return base.Channel.EndImportVTDLaunches(result);
        }
        
        private System.IAsyncResult OnBeginImportVTDLaunches(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginImportVTDLaunches(tmp, callback, asyncState);
        }
        
        private object[] OnEndImportVTDLaunches(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndImportVTDLaunches(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportVTDLaunchesCompleted(object state) {
            if ((this.ImportVTDLaunchesCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportVTDLaunchesCompleted(this, new ImportVTDLaunchesCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportVTDLaunchesAsync(string tmp) {
            this.ImportVTDLaunchesAsync(tmp, null);
        }
        
        public void ImportVTDLaunchesAsync(string tmp, object userState) {
            if ((this.onBeginImportVTDLaunchesDelegate == null)) {
                this.onBeginImportVTDLaunchesDelegate = new BeginOperationDelegate(this.OnBeginImportVTDLaunches);
            }
            if ((this.onEndImportVTDLaunchesDelegate == null)) {
                this.onEndImportVTDLaunchesDelegate = new EndOperationDelegate(this.OnEndImportVTDLaunches);
            }
            if ((this.onImportVTDLaunchesCompletedDelegate == null)) {
                this.onImportVTDLaunchesCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportVTDLaunchesCompleted);
            }
            base.InvokeAsync(this.onBeginImportVTDLaunchesDelegate, new object[] {
                        tmp}, this.onEndImportVTDLaunchesDelegate, this.onImportVTDLaunchesCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginImportDefects(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportDefects(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string importVtd.startTable.IoraWCFService_ImpVtd.EndImportDefects(System.IAsyncResult result) {
            return base.Channel.EndImportDefects(result);
        }
        
        private System.IAsyncResult OnBeginImportDefects(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginImportDefects(tmp, callback, asyncState);
        }
        
        private object[] OnEndImportDefects(System.IAsyncResult result) {
            string retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndImportDefects(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportDefectsCompleted(object state) {
            if ((this.ImportDefectsCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportDefectsCompleted(this, new ImportDefectsCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportDefectsAsync(string tmp) {
            this.ImportDefectsAsync(tmp, null);
        }
        
        public void ImportDefectsAsync(string tmp, object userState) {
            if ((this.onBeginImportDefectsDelegate == null)) {
                this.onBeginImportDefectsDelegate = new BeginOperationDelegate(this.OnBeginImportDefects);
            }
            if ((this.onEndImportDefectsDelegate == null)) {
                this.onEndImportDefectsDelegate = new EndOperationDelegate(this.OnEndImportDefects);
            }
            if ((this.onImportDefectsCompletedDelegate == null)) {
                this.onImportDefectsCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportDefectsCompleted);
            }
            base.InvokeAsync(this.onBeginImportDefectsDelegate, new object[] {
                        tmp}, this.onEndImportDefectsDelegate, this.onImportDefectsCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginImportTubeJournal(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportTubeJournal(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string importVtd.startTable.IoraWCFService_ImpVtd.EndImportTubeJournal(System.IAsyncResult result) {
            return base.Channel.EndImportTubeJournal(result);
        }
        
        private System.IAsyncResult OnBeginImportTubeJournal(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginImportTubeJournal(tmp, callback, asyncState);
        }
        
        private object[] OnEndImportTubeJournal(System.IAsyncResult result) {
            string retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndImportTubeJournal(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportTubeJournalCompleted(object state) {
            if ((this.ImportTubeJournalCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportTubeJournalCompleted(this, new ImportTubeJournalCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportTubeJournalAsync(string tmp) {
            this.ImportTubeJournalAsync(tmp, null);
        }
        
        public void ImportTubeJournalAsync(string tmp, object userState) {
            if ((this.onBeginImportTubeJournalDelegate == null)) {
                this.onBeginImportTubeJournalDelegate = new BeginOperationDelegate(this.OnBeginImportTubeJournal);
            }
            if ((this.onEndImportTubeJournalDelegate == null)) {
                this.onEndImportTubeJournalDelegate = new EndOperationDelegate(this.OnEndImportTubeJournal);
            }
            if ((this.onImportTubeJournalCompletedDelegate == null)) {
                this.onImportTubeJournalCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportTubeJournalCompleted);
            }
            base.InvokeAsync(this.onBeginImportTubeJournalDelegate, new object[] {
                        tmp}, this.onEndImportTubeJournalDelegate, this.onImportTubeJournalCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetUserNameById(string userKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetUserNameById(userKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        string importVtd.startTable.IoraWCFService_ImpVtd.EndGetUserNameById(System.IAsyncResult result) {
            return base.Channel.EndGetUserNameById(result);
        }
        
        private System.IAsyncResult OnBeginGetUserNameById(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userKey = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetUserNameById(userKey, callback, asyncState);
        }
        
        private object[] OnEndGetUserNameById(System.IAsyncResult result) {
            string retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetUserNameById(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetUserNameByIdCompleted(object state) {
            if ((this.GetUserNameByIdCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetUserNameByIdCompleted(this, new GetUserNameByIdCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetUserNameByIdAsync(string userKey) {
            this.GetUserNameByIdAsync(userKey, null);
        }
        
        public void GetUserNameByIdAsync(string userKey, object userState) {
            if ((this.onBeginGetUserNameByIdDelegate == null)) {
                this.onBeginGetUserNameByIdDelegate = new BeginOperationDelegate(this.OnBeginGetUserNameById);
            }
            if ((this.onEndGetUserNameByIdDelegate == null)) {
                this.onEndGetUserNameByIdDelegate = new EndOperationDelegate(this.OnEndGetUserNameById);
            }
            if ((this.onGetUserNameByIdCompletedDelegate == null)) {
                this.onGetUserNameByIdCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetUserNameByIdCompleted);
            }
            base.InvokeAsync(this.onBeginGetUserNameByIdDelegate, new object[] {
                        userKey}, this.onEndGetUserNameByIdDelegate, this.onGetUserNameByIdCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginDeleteVtdImport(string keyImport, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginDeleteVtdImport(keyImport, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndDeleteVtdImport(System.IAsyncResult result) {
            return base.Channel.EndDeleteVtdImport(result);
        }
        
        private System.IAsyncResult OnBeginDeleteVtdImport(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImport = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginDeleteVtdImport(keyImport, callback, asyncState);
        }
        
        private object[] OnEndDeleteVtdImport(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndDeleteVtdImport(result);
            return new object[] {
                    retVal};
        }
        
        private void OnDeleteVtdImportCompleted(object state) {
            if ((this.DeleteVtdImportCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.DeleteVtdImportCompleted(this, new DeleteVtdImportCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void DeleteVtdImportAsync(string keyImport) {
            this.DeleteVtdImportAsync(keyImport, null);
        }
        
        public void DeleteVtdImportAsync(string keyImport, object userState) {
            if ((this.onBeginDeleteVtdImportDelegate == null)) {
                this.onBeginDeleteVtdImportDelegate = new BeginOperationDelegate(this.OnBeginDeleteVtdImport);
            }
            if ((this.onEndDeleteVtdImportDelegate == null)) {
                this.onEndDeleteVtdImportDelegate = new EndOperationDelegate(this.OnEndDeleteVtdImport);
            }
            if ((this.onDeleteVtdImportCompletedDelegate == null)) {
                this.onDeleteVtdImportCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnDeleteVtdImportCompleted);
            }
            base.InvokeAsync(this.onBeginDeleteVtdImportDelegate, new object[] {
                        keyImport}, this.onEndDeleteVtdImportDelegate, this.onDeleteVtdImportCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginCreate_New_ImportVTD(string userKeyVar, string fileNameVar, string pathVar, string vtdDataKeyVar, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginCreate_New_ImportVTD(userKeyVar, fileNameVar, pathVar, vtdDataKeyVar, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.KeyImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndCreate_New_ImportVTD(System.IAsyncResult result) {
            return base.Channel.EndCreate_New_ImportVTD(result);
        }
        
        private System.IAsyncResult OnBeginCreate_New_ImportVTD(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string userKeyVar = ((string)(inValues[0]));
            string fileNameVar = ((string)(inValues[1]));
            string pathVar = ((string)(inValues[2]));
            string vtdDataKeyVar = ((string)(inValues[3]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginCreate_New_ImportVTD(userKeyVar, fileNameVar, pathVar, vtdDataKeyVar, callback, asyncState);
        }
        
        private object[] OnEndCreate_New_ImportVTD(System.IAsyncResult result) {
            importVtd.startTable.KeyImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndCreate_New_ImportVTD(result);
            return new object[] {
                    retVal};
        }
        
        private void OnCreate_New_ImportVTDCompleted(object state) {
            if ((this.Create_New_ImportVTDCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Create_New_ImportVTDCompleted(this, new Create_New_ImportVTDCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Create_New_ImportVTDAsync(string userKeyVar, string fileNameVar, string pathVar, string vtdDataKeyVar) {
            this.Create_New_ImportVTDAsync(userKeyVar, fileNameVar, pathVar, vtdDataKeyVar, null);
        }
        
        public void Create_New_ImportVTDAsync(string userKeyVar, string fileNameVar, string pathVar, string vtdDataKeyVar, object userState) {
            if ((this.onBeginCreate_New_ImportVTDDelegate == null)) {
                this.onBeginCreate_New_ImportVTDDelegate = new BeginOperationDelegate(this.OnBeginCreate_New_ImportVTD);
            }
            if ((this.onEndCreate_New_ImportVTDDelegate == null)) {
                this.onEndCreate_New_ImportVTDDelegate = new EndOperationDelegate(this.OnEndCreate_New_ImportVTD);
            }
            if ((this.onCreate_New_ImportVTDCompletedDelegate == null)) {
                this.onCreate_New_ImportVTDCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCreate_New_ImportVTDCompleted);
            }
            base.InvokeAsync(this.onBeginCreate_New_ImportVTDDelegate, new object[] {
                        userKeyVar,
                        fileNameVar,
                        pathVar,
                        vtdDataKeyVar}, this.onEndCreate_New_ImportVTDDelegate, this.onCreate_New_ImportVTDCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetKeyUser(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetKeyUser(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.KeyUserVtd importVtd.startTable.IoraWCFService_ImpVtd.EndGetKeyUser(System.IAsyncResult result) {
            return base.Channel.EndGetKeyUser(result);
        }
        
        private System.IAsyncResult OnBeginGetKeyUser(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetKeyUser(callback, asyncState);
        }
        
        private object[] OnEndGetKeyUser(System.IAsyncResult result) {
            importVtd.startTable.KeyUserVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetKeyUser(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetKeyUserCompleted(object state) {
            if ((this.GetKeyUserCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetKeyUserCompleted(this, new GetKeyUserCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetKeyUserAsync() {
            this.GetKeyUserAsync(null);
        }
        
        public void GetKeyUserAsync(object userState) {
            if ((this.onBeginGetKeyUserDelegate == null)) {
                this.onBeginGetKeyUserDelegate = new BeginOperationDelegate(this.OnBeginGetKeyUser);
            }
            if ((this.onEndGetKeyUserDelegate == null)) {
                this.onEndGetKeyUserDelegate = new EndOperationDelegate(this.OnEndGetKeyUser);
            }
            if ((this.onGetKeyUserCompletedDelegate == null)) {
                this.onGetKeyUserCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetKeyUserCompleted);
            }
            base.InvokeAsync(this.onBeginGetKeyUserDelegate, null, this.onEndGetKeyUserDelegate, this.onGetKeyUserCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetServiceVersion(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetServiceVersion(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.ServiceVersion importVtd.startTable.IoraWCFService_ImpVtd.EndGetServiceVersion(System.IAsyncResult result) {
            return base.Channel.EndGetServiceVersion(result);
        }
        
        private System.IAsyncResult OnBeginGetServiceVersion(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetServiceVersion(callback, asyncState);
        }
        
        private object[] OnEndGetServiceVersion(System.IAsyncResult result) {
            importVtd.startTable.ServiceVersion retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetServiceVersion(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetServiceVersionCompleted(object state) {
            if ((this.GetServiceVersionCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetServiceVersionCompleted(this, new GetServiceVersionCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetServiceVersionAsync() {
            this.GetServiceVersionAsync(null);
        }
        
        public void GetServiceVersionAsync(object userState) {
            if ((this.onBeginGetServiceVersionDelegate == null)) {
                this.onBeginGetServiceVersionDelegate = new BeginOperationDelegate(this.OnBeginGetServiceVersion);
            }
            if ((this.onEndGetServiceVersionDelegate == null)) {
                this.onEndGetServiceVersionDelegate = new EndOperationDelegate(this.OnEndGetServiceVersion);
            }
            if ((this.onGetServiceVersionCompletedDelegate == null)) {
                this.onGetServiceVersionCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetServiceVersionCompleted);
            }
            base.InvokeAsync(this.onBeginGetServiceVersionDelegate, null, this.onEndGetServiceVersionDelegate, this.onGetServiceVersionCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetDbRepers(string keyImp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetDbRepers(keyImp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetDbRepers importVtd.startTable.IoraWCFService_ImpVtd.EndGetDbRepers(System.IAsyncResult result) {
            return base.Channel.EndGetDbRepers(result);
        }
        
        private System.IAsyncResult OnBeginGetDbRepers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetDbRepers(keyImp, callback, asyncState);
        }
        
        private object[] OnEndGetDbRepers(System.IAsyncResult result) {
            importVtd.startTable.GetDbRepers retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetDbRepers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetDbRepersCompleted(object state) {
            if ((this.GetDbRepersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetDbRepersCompleted(this, new GetDbRepersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetDbRepersAsync(string keyImp) {
            this.GetDbRepersAsync(keyImp, null);
        }
        
        public void GetDbRepersAsync(string keyImp, object userState) {
            if ((this.onBeginGetDbRepersDelegate == null)) {
                this.onBeginGetDbRepersDelegate = new BeginOperationDelegate(this.OnBeginGetDbRepers);
            }
            if ((this.onEndGetDbRepersDelegate == null)) {
                this.onEndGetDbRepersDelegate = new EndOperationDelegate(this.OnEndGetDbRepers);
            }
            if ((this.onGetDbRepersCompletedDelegate == null)) {
                this.onGetDbRepersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetDbRepersCompleted);
            }
            base.InvokeAsync(this.onBeginGetDbRepersDelegate, new object[] {
                        keyImp}, this.onEndGetDbRepersDelegate, this.onGetDbRepersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetFileRepers(string tmp, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetFileRepers(tmp, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetFileRepers importVtd.startTable.IoraWCFService_ImpVtd.EndGetFileRepers(System.IAsyncResult result) {
            return base.Channel.EndGetFileRepers(result);
        }
        
        private System.IAsyncResult OnBeginGetFileRepers(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string tmp = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetFileRepers(tmp, callback, asyncState);
        }
        
        private object[] OnEndGetFileRepers(System.IAsyncResult result) {
            importVtd.startTable.GetFileRepers retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetFileRepers(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetFileRepersCompleted(object state) {
            if ((this.GetFileRepersCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetFileRepersCompleted(this, new GetFileRepersCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetFileRepersAsync(string tmp) {
            this.GetFileRepersAsync(tmp, null);
        }
        
        public void GetFileRepersAsync(string tmp, object userState) {
            if ((this.onBeginGetFileRepersDelegate == null)) {
                this.onBeginGetFileRepersDelegate = new BeginOperationDelegate(this.OnBeginGetFileRepers);
            }
            if ((this.onEndGetFileRepersDelegate == null)) {
                this.onEndGetFileRepersDelegate = new EndOperationDelegate(this.OnEndGetFileRepers);
            }
            if ((this.onGetFileRepersCompletedDelegate == null)) {
                this.onGetFileRepersCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetFileRepersCompleted);
            }
            base.InvokeAsync(this.onBeginGetFileRepersDelegate, new object[] {
                        tmp}, this.onEndGetFileRepersDelegate, this.onGetFileRepersCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginLoad_VTDXLSfileTrue(string newImportKey, string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginLoad_VTDXLSfileTrue(newImportKey, fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndLoad_VTDXLSfileTrue(System.IAsyncResult result) {
            return base.Channel.EndLoad_VTDXLSfileTrue(result);
        }
        
        private System.IAsyncResult OnBeginLoad_VTDXLSfileTrue(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string newImportKey = ((string)(inValues[0]));
            string fileName = ((string)(inValues[1]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginLoad_VTDXLSfileTrue(newImportKey, fileName, callback, asyncState);
        }
        
        private object[] OnEndLoad_VTDXLSfileTrue(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndLoad_VTDXLSfileTrue(result);
            return new object[] {
                    retVal};
        }
        
        private void OnLoad_VTDXLSfileTrueCompleted(object state) {
            if ((this.Load_VTDXLSfileTrueCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.Load_VTDXLSfileTrueCompleted(this, new Load_VTDXLSfileTrueCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void Load_VTDXLSfileTrueAsync(string newImportKey, string fileName) {
            this.Load_VTDXLSfileTrueAsync(newImportKey, fileName, null);
        }
        
        public void Load_VTDXLSfileTrueAsync(string newImportKey, string fileName, object userState) {
            if ((this.onBeginLoad_VTDXLSfileTrueDelegate == null)) {
                this.onBeginLoad_VTDXLSfileTrueDelegate = new BeginOperationDelegate(this.OnBeginLoad_VTDXLSfileTrue);
            }
            if ((this.onEndLoad_VTDXLSfileTrueDelegate == null)) {
                this.onEndLoad_VTDXLSfileTrueDelegate = new EndOperationDelegate(this.OnEndLoad_VTDXLSfileTrue);
            }
            if ((this.onLoad_VTDXLSfileTrueCompletedDelegate == null)) {
                this.onLoad_VTDXLSfileTrueCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnLoad_VTDXLSfileTrueCompleted);
            }
            base.InvokeAsync(this.onBeginLoad_VTDXLSfileTrueDelegate, new object[] {
                        newImportKey,
                        fileName}, this.onEndLoad_VTDXLSfileTrueDelegate, this.onLoad_VTDXLSfileTrueCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginImportFile(double impKey, string typeOfImport, string fileName, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportFile(impKey, typeOfImport, fileName, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.StatusAnswer_ImpVtd importVtd.startTable.IoraWCFService_ImpVtd.EndImportFile(System.IAsyncResult result) {
            return base.Channel.EndImportFile(result);
        }
        
        private System.IAsyncResult OnBeginImportFile(object[] inValues, System.AsyncCallback callback, object asyncState) {
            double impKey = ((double)(inValues[0]));
            string typeOfImport = ((string)(inValues[1]));
            string fileName = ((string)(inValues[2]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginImportFile(impKey, typeOfImport, fileName, callback, asyncState);
        }
        
        private object[] OnEndImportFile(System.IAsyncResult result) {
            importVtd.startTable.StatusAnswer_ImpVtd retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndImportFile(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportFileCompleted(object state) {
            if ((this.ImportFileCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportFileCompleted(this, new ImportFileCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportFileAsync(double impKey, string typeOfImport, string fileName) {
            this.ImportFileAsync(impKey, typeOfImport, fileName, null);
        }
        
        public void ImportFileAsync(double impKey, string typeOfImport, string fileName, object userState) {
            if ((this.onBeginImportFileDelegate == null)) {
                this.onBeginImportFileDelegate = new BeginOperationDelegate(this.OnBeginImportFile);
            }
            if ((this.onEndImportFileDelegate == null)) {
                this.onEndImportFileDelegate = new EndOperationDelegate(this.OnEndImportFile);
            }
            if ((this.onImportFileCompletedDelegate == null)) {
                this.onImportFileCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportFileCompleted);
            }
            base.InvokeAsync(this.onBeginImportFileDelegate, new object[] {
                        impKey,
                        typeOfImport,
                        fileName}, this.onEndImportFileDelegate, this.onImportFileCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginIsOld_VTD_Available(string vtdMakingKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginIsOld_VTD_Available(vtdMakingKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.GetImportSecond importVtd.startTable.IoraWCFService_ImpVtd.EndIsOld_VTD_Available(System.IAsyncResult result) {
            return base.Channel.EndIsOld_VTD_Available(result);
        }
        
        private System.IAsyncResult OnBeginIsOld_VTD_Available(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vtdMakingKey = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginIsOld_VTD_Available(vtdMakingKey, callback, asyncState);
        }
        
        private object[] OnEndIsOld_VTD_Available(System.IAsyncResult result) {
            importVtd.startTable.GetImportSecond retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndIsOld_VTD_Available(result);
            return new object[] {
                    retVal};
        }
        
        private void OnIsOld_VTD_AvailableCompleted(object state) {
            if ((this.IsOld_VTD_AvailableCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.IsOld_VTD_AvailableCompleted(this, new IsOld_VTD_AvailableCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void IsOld_VTD_AvailableAsync(string vtdMakingKey) {
            this.IsOld_VTD_AvailableAsync(vtdMakingKey, null);
        }
        
        public void IsOld_VTD_AvailableAsync(string vtdMakingKey, object userState) {
            if ((this.onBeginIsOld_VTD_AvailableDelegate == null)) {
                this.onBeginIsOld_VTD_AvailableDelegate = new BeginOperationDelegate(this.OnBeginIsOld_VTD_Available);
            }
            if ((this.onEndIsOld_VTD_AvailableDelegate == null)) {
                this.onEndIsOld_VTD_AvailableDelegate = new EndOperationDelegate(this.OnEndIsOld_VTD_Available);
            }
            if ((this.onIsOld_VTD_AvailableCompletedDelegate == null)) {
                this.onIsOld_VTD_AvailableCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnIsOld_VTD_AvailableCompleted);
            }
            base.InvokeAsync(this.onBeginIsOld_VTD_AvailableDelegate, new object[] {
                        vtdMakingKey}, this.onEndIsOld_VTD_AvailableDelegate, this.onIsOld_VTD_AvailableCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginRemoveBound(string keyImport, string filekey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginRemoveBound(keyImport, filekey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.RemoveBound importVtd.startTable.IoraWCFService_ImpVtd.EndRemoveBound(System.IAsyncResult result) {
            return base.Channel.EndRemoveBound(result);
        }
        
        private System.IAsyncResult OnBeginRemoveBound(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string keyImport = ((string)(inValues[0]));
            string filekey = ((string)(inValues[1]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginRemoveBound(keyImport, filekey, callback, asyncState);
        }
        
        private object[] OnEndRemoveBound(System.IAsyncResult result) {
            importVtd.startTable.RemoveBound retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndRemoveBound(result);
            return new object[] {
                    retVal};
        }
        
        private void OnRemoveBoundCompleted(object state) {
            if ((this.RemoveBoundCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.RemoveBoundCompleted(this, new RemoveBoundCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void RemoveBoundAsync(string keyImport, string filekey) {
            this.RemoveBoundAsync(keyImport, filekey, null);
        }
        
        public void RemoveBoundAsync(string keyImport, string filekey, object userState) {
            if ((this.onBeginRemoveBoundDelegate == null)) {
                this.onBeginRemoveBoundDelegate = new BeginOperationDelegate(this.OnBeginRemoveBound);
            }
            if ((this.onEndRemoveBoundDelegate == null)) {
                this.onEndRemoveBoundDelegate = new EndOperationDelegate(this.OnEndRemoveBound);
            }
            if ((this.onRemoveBoundCompletedDelegate == null)) {
                this.onRemoveBoundCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnRemoveBoundCompleted);
            }
            base.InvokeAsync(this.onBeginRemoveBoundDelegate, new object[] {
                        keyImport,
                        filekey}, this.onEndRemoveBoundDelegate, this.onRemoveBoundCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginImportTubeMatching(string vtdMakingKey, string filekey, string dbKey, int typeLink, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginImportTubeMatching(vtdMakingKey, filekey, dbKey, typeLink, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.KeyBoundResult importVtd.startTable.IoraWCFService_ImpVtd.EndImportTubeMatching(System.IAsyncResult result) {
            return base.Channel.EndImportTubeMatching(result);
        }
        
        private System.IAsyncResult OnBeginImportTubeMatching(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vtdMakingKey = ((string)(inValues[0]));
            string filekey = ((string)(inValues[1]));
            string dbKey = ((string)(inValues[2]));
            int typeLink = ((int)(inValues[3]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginImportTubeMatching(vtdMakingKey, filekey, dbKey, typeLink, callback, asyncState);
        }
        
        private object[] OnEndImportTubeMatching(System.IAsyncResult result) {
            importVtd.startTable.KeyBoundResult retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndImportTubeMatching(result);
            return new object[] {
                    retVal};
        }
        
        private void OnImportTubeMatchingCompleted(object state) {
            if ((this.ImportTubeMatchingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.ImportTubeMatchingCompleted(this, new ImportTubeMatchingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void ImportTubeMatchingAsync(string vtdMakingKey, string filekey, string dbKey, int typeLink) {
            this.ImportTubeMatchingAsync(vtdMakingKey, filekey, dbKey, typeLink, null);
        }
        
        public void ImportTubeMatchingAsync(string vtdMakingKey, string filekey, string dbKey, int typeLink, object userState) {
            if ((this.onBeginImportTubeMatchingDelegate == null)) {
                this.onBeginImportTubeMatchingDelegate = new BeginOperationDelegate(this.OnBeginImportTubeMatching);
            }
            if ((this.onEndImportTubeMatchingDelegate == null)) {
                this.onEndImportTubeMatchingDelegate = new EndOperationDelegate(this.OnEndImportTubeMatching);
            }
            if ((this.onImportTubeMatchingCompletedDelegate == null)) {
                this.onImportTubeMatchingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnImportTubeMatchingCompleted);
            }
            base.InvokeAsync(this.onBeginImportTubeMatchingDelegate, new object[] {
                        vtdMakingKey,
                        filekey,
                        dbKey,
                        typeLink}, this.onEndImportTubeMatchingDelegate, this.onImportTubeMatchingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetTemMapping(string vtdMakingKey, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetTemMapping(vtdMakingKey, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.KeyBoundResult importVtd.startTable.IoraWCFService_ImpVtd.EndGetTemMapping(System.IAsyncResult result) {
            return base.Channel.EndGetTemMapping(result);
        }
        
        private System.IAsyncResult OnBeginGetTemMapping(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string vtdMakingKey = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetTemMapping(vtdMakingKey, callback, asyncState);
        }
        
        private object[] OnEndGetTemMapping(System.IAsyncResult result) {
            importVtd.startTable.KeyBoundResult retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetTemMapping(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetTemMappingCompleted(object state) {
            if ((this.GetTemMappingCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetTemMappingCompleted(this, new GetTemMappingCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetTemMappingAsync(string vtdMakingKey) {
            this.GetTemMappingAsync(vtdMakingKey, null);
        }
        
        public void GetTemMappingAsync(string vtdMakingKey, object userState) {
            if ((this.onBeginGetTemMappingDelegate == null)) {
                this.onBeginGetTemMappingDelegate = new BeginOperationDelegate(this.OnBeginGetTemMapping);
            }
            if ((this.onEndGetTemMappingDelegate == null)) {
                this.onEndGetTemMappingDelegate = new EndOperationDelegate(this.OnEndGetTemMapping);
            }
            if ((this.onGetTemMappingCompletedDelegate == null)) {
                this.onGetTemMappingCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetTemMappingCompleted);
            }
            base.InvokeAsync(this.onBeginGetTemMappingDelegate, new object[] {
                        vtdMakingKey}, this.onEndGetTemMappingDelegate, this.onGetTemMappingCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetVtdJobStatus(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVtdJobStatus(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.Res_Job importVtd.startTable.IoraWCFService_ImpVtd.EndGetVtdJobStatus(System.IAsyncResult result) {
            return base.Channel.EndGetVtdJobStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetVtdJobStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetVtdJobStatus(callback, asyncState);
        }
        
        private object[] OnEndGetVtdJobStatus(System.IAsyncResult result) {
            importVtd.startTable.Res_Job retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetVtdJobStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVtdJobStatusCompleted(object state) {
            if ((this.GetVtdJobStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVtdJobStatusCompleted(this, new GetVtdJobStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVtdJobStatusAsync() {
            this.GetVtdJobStatusAsync(null);
        }
        
        public void GetVtdJobStatusAsync(object userState) {
            if ((this.onBeginGetVtdJobStatusDelegate == null)) {
                this.onBeginGetVtdJobStatusDelegate = new BeginOperationDelegate(this.OnBeginGetVtdJobStatus);
            }
            if ((this.onEndGetVtdJobStatusDelegate == null)) {
                this.onEndGetVtdJobStatusDelegate = new EndOperationDelegate(this.OnEndGetVtdJobStatus);
            }
            if ((this.onGetVtdJobStatusCompletedDelegate == null)) {
                this.onGetVtdJobStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVtdJobStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetVtdJobStatusDelegate, null, this.onEndGetVtdJobStatusDelegate, this.onGetVtdJobStatusCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetVtdImpInfo(string key, System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetVtdImpInfo(key, callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.InfoForOneVtdImport[] importVtd.startTable.IoraWCFService_ImpVtd.EndGetVtdImpInfo(System.IAsyncResult result) {
            return base.Channel.EndGetVtdImpInfo(result);
        }
        
        private System.IAsyncResult OnBeginGetVtdImpInfo(object[] inValues, System.AsyncCallback callback, object asyncState) {
            string key = ((string)(inValues[0]));
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetVtdImpInfo(key, callback, asyncState);
        }
        
        private object[] OnEndGetVtdImpInfo(System.IAsyncResult result) {
            importVtd.startTable.InfoForOneVtdImport[] retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetVtdImpInfo(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetVtdImpInfoCompleted(object state) {
            if ((this.GetVtdImpInfoCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetVtdImpInfoCompleted(this, new GetVtdImpInfoCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetVtdImpInfoAsync(string key) {
            this.GetVtdImpInfoAsync(key, null);
        }
        
        public void GetVtdImpInfoAsync(string key, object userState) {
            if ((this.onBeginGetVtdImpInfoDelegate == null)) {
                this.onBeginGetVtdImpInfoDelegate = new BeginOperationDelegate(this.OnBeginGetVtdImpInfo);
            }
            if ((this.onEndGetVtdImpInfoDelegate == null)) {
                this.onEndGetVtdImpInfoDelegate = new EndOperationDelegate(this.OnEndGetVtdImpInfo);
            }
            if ((this.onGetVtdImpInfoCompletedDelegate == null)) {
                this.onGetVtdImpInfoCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetVtdImpInfoCompleted);
            }
            base.InvokeAsync(this.onBeginGetVtdImpInfoDelegate, new object[] {
                        key}, this.onEndGetVtdImpInfoDelegate, this.onGetVtdImpInfoCompletedDelegate, userState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.IAsyncResult importVtd.startTable.IoraWCFService_ImpVtd.BeginGetJobStatus(System.AsyncCallback callback, object asyncState) {
            return base.Channel.BeginGetJobStatus(callback, asyncState);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        importVtd.startTable.JobStatus importVtd.startTable.IoraWCFService_ImpVtd.EndGetJobStatus(System.IAsyncResult result) {
            return base.Channel.EndGetJobStatus(result);
        }
        
        private System.IAsyncResult OnBeginGetJobStatus(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).BeginGetJobStatus(callback, asyncState);
        }
        
        private object[] OnEndGetJobStatus(System.IAsyncResult result) {
            importVtd.startTable.JobStatus retVal = ((importVtd.startTable.IoraWCFService_ImpVtd)(this)).EndGetJobStatus(result);
            return new object[] {
                    retVal};
        }
        
        private void OnGetJobStatusCompleted(object state) {
            if ((this.GetJobStatusCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.GetJobStatusCompleted(this, new GetJobStatusCompletedEventArgs(e.Results, e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void GetJobStatusAsync() {
            this.GetJobStatusAsync(null);
        }
        
        public void GetJobStatusAsync(object userState) {
            if ((this.onBeginGetJobStatusDelegate == null)) {
                this.onBeginGetJobStatusDelegate = new BeginOperationDelegate(this.OnBeginGetJobStatus);
            }
            if ((this.onEndGetJobStatusDelegate == null)) {
                this.onEndGetJobStatusDelegate = new EndOperationDelegate(this.OnEndGetJobStatus);
            }
            if ((this.onGetJobStatusCompletedDelegate == null)) {
                this.onGetJobStatusCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnGetJobStatusCompleted);
            }
            base.InvokeAsync(this.onBeginGetJobStatusDelegate, null, this.onEndGetJobStatusDelegate, this.onGetJobStatusCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginOpen(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(callback, asyncState);
        }
        
        private object[] OnEndOpen(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndOpen(result);
            return null;
        }
        
        private void OnOpenCompleted(object state) {
            if ((this.OpenCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.OpenCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void OpenAsync() {
            this.OpenAsync(null);
        }
        
        public void OpenAsync(object userState) {
            if ((this.onBeginOpenDelegate == null)) {
                this.onBeginOpenDelegate = new BeginOperationDelegate(this.OnBeginOpen);
            }
            if ((this.onEndOpenDelegate == null)) {
                this.onEndOpenDelegate = new EndOperationDelegate(this.OnEndOpen);
            }
            if ((this.onOpenCompletedDelegate == null)) {
                this.onOpenCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnOpenCompleted);
            }
            base.InvokeAsync(this.onBeginOpenDelegate, null, this.onEndOpenDelegate, this.onOpenCompletedDelegate, userState);
        }
        
        private System.IAsyncResult OnBeginClose(object[] inValues, System.AsyncCallback callback, object asyncState) {
            return ((System.ServiceModel.ICommunicationObject)(this)).BeginClose(callback, asyncState);
        }
        
        private object[] OnEndClose(System.IAsyncResult result) {
            ((System.ServiceModel.ICommunicationObject)(this)).EndClose(result);
            return null;
        }
        
        private void OnCloseCompleted(object state) {
            if ((this.CloseCompleted != null)) {
                InvokeAsyncCompletedEventArgs e = ((InvokeAsyncCompletedEventArgs)(state));
                this.CloseCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(e.Error, e.Cancelled, e.UserState));
            }
        }
        
        public void CloseAsync() {
            this.CloseAsync(null);
        }
        
        public void CloseAsync(object userState) {
            if ((this.onBeginCloseDelegate == null)) {
                this.onBeginCloseDelegate = new BeginOperationDelegate(this.OnBeginClose);
            }
            if ((this.onEndCloseDelegate == null)) {
                this.onEndCloseDelegate = new EndOperationDelegate(this.OnEndClose);
            }
            if ((this.onCloseCompletedDelegate == null)) {
                this.onCloseCompletedDelegate = new System.Threading.SendOrPostCallback(this.OnCloseCompleted);
            }
            base.InvokeAsync(this.onBeginCloseDelegate, null, this.onEndCloseDelegate, this.onCloseCompletedDelegate, userState);
        }
        
        protected override importVtd.startTable.IoraWCFService_ImpVtd CreateChannel() {
            return new IoraWCFService_ImpVtdClientChannel(this);
        }
        
        private class IoraWCFService_ImpVtdClientChannel : ChannelBase<importVtd.startTable.IoraWCFService_ImpVtd>, importVtd.startTable.IoraWCFService_ImpVtd {
            
            public IoraWCFService_ImpVtdClientChannel(System.ServiceModel.ClientBase<importVtd.startTable.IoraWCFService_ImpVtd> client) : 
                    base(client) {
            }
            
            public System.IAsyncResult BeginGet_ImpVTD_Making_List(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Get_ImpVTD_Making_List", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.ImpVTD_Making EndGet_ImpVTD_Making_List(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.ImpVTD_Making _result = ((importVtd.startTable.ImpVTD_Making)(base.EndInvoke("Get_ImpVTD_Making_List", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDBDefect_List(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetDBDefect_List", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetDBDefect EndGetDBDefect_List(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetDBDefect _result = ((importVtd.startTable.GetDBDefect)(base.EndInvoke("GetDBDefect_List", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetInfoForNewImport(string keyImp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyImp;
                System.IAsyncResult _result = base.BeginInvoke("GetInfoForNewImport", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.InfoForNewImport EndGetInfoForNewImport(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.InfoForNewImport _result = ((importVtd.startTable.InfoForNewImport)(base.EndInvoke("GetInfoForNewImport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDBDefect_ListFile(string keyImp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyImp;
                System.IAsyncResult _result = base.BeginInvoke("GetDBDefect_ListFile", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetDBDefectFile EndGetDBDefect_ListFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetDBDefectFile _result = ((importVtd.startTable.GetDBDefectFile)(base.EndInvoke("GetDBDefect_ListFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDbDefectMaping(string keyImp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyImp;
                System.IAsyncResult _result = base.BeginInvoke("GetDbDefectMaping", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetDBDefectMaping EndGetDbDefectMaping(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetDBDefectMaping _result = ((importVtd.startTable.GetDBDefectMaping)(base.EndInvoke("GetDbDefectMaping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteMapingDict(string keyMap, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyMap;
                System.IAsyncResult _result = base.BeginInvoke("DeleteMapingDict", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndDeleteMapingDict(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("DeleteMapingDict", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginSaveMapingDict(importVtd.startTable.GetDBDefectMapingList[] dBDefectMapingList, string keyImp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = dBDefectMapingList;
                _args[1] = keyImp;
                System.IAsyncResult _result = base.BeginInvoke("SaveMapingDict", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndSaveMapingDict(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("SaveMapingDict", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGet_ImpVTD_Making_One(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("Get_ImpVTD_Making_One", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.ImpVTD_Making EndGet_ImpVTD_Making_One(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.ImpVTD_Making _result = ((importVtd.startTable.ImpVTD_Making)(base.EndInvoke("Get_ImpVTD_Making_One", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGet_MG_ImpVtd(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("Get_MG_ImpVtd", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.MG_ImpVtd EndGet_MG_ImpVtd(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.MG_ImpVtd _result = ((importVtd.startTable.MG_ImpVtd)(base.EndInvoke("Get_MG_ImpVtd", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetThreadsForMg(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetThreadsForMg", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.ThreadForMgImpVtd EndGetThreadsForMg(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.ThreadForMgImpVtd _result = ((importVtd.startTable.ThreadForMgImpVtd)(base.EndInvoke("GetThreadsForMg", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetCountVtdForThread(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetCountVtdForThread", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.CountVtdSec EndGetCountVtdForThread(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.CountVtdSec _result = ((importVtd.startTable.CountVtdSec)(base.EndInvoke("GetCountVtdForThread", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVTDSec_List(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetVTDSec_List", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.VtdSec EndGetVTDSec_List(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.VtdSec _result = ((importVtd.startTable.VtdSec)(base.EndInvoke("GetVTDSec_List", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVTDSec_Param(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetVTDSec_Param", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.VtdSecParam EndGetVTDSec_Param(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.VtdSecParam _result = ((importVtd.startTable.VtdSecParam)(base.EndInvoke("GetVTDSec_Param", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVTD_data_AllList(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetVTD_data_AllList", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.VtdNumberDogAllList EndGetVTD_data_AllList(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.VtdNumberDogAllList _result = ((importVtd.startTable.VtdNumberDogAllList)(base.EndInvoke("GetVTD_data_AllList", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGet_DictDefectXSL(string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("Get_DictDefectXSL", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.DictDefectXSL_ImpVtd EndGet_DictDefectXSL(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.DictDefectXSL_ImpVtd _result = ((importVtd.startTable.DictDefectXSL_ImpVtd)(base.EndInvoke("Get_DictDefectXSL", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVTD_Data_Params(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetVTD_Data_Params", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.VtdDogovorParams EndGetVTD_Data_Params(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.VtdDogovorParams _result = ((importVtd.startTable.VtdDogovorParams)(base.EndInvoke("GetVTD_Data_Params", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLeftTableData(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetLeftTableData", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.VtdTubeBaza EndGetLeftTableData(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.VtdTubeBaza _result = ((importVtd.startTable.VtdTubeBaza)(base.EndInvoke("GetLeftTableData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRightTableData(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetRightTableData", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.VtdTubeBaza EndGetRightTableData(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.VtdTubeBaza _result = ((importVtd.startTable.VtdTubeBaza)(base.EndInvoke("GetRightTableData", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetLeftDefectListTube(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetLeftDefectListTube", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.DefectListTube[] EndGetLeftDefectListTube(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.DefectListTube[] _result = ((importVtd.startTable.DefectListTube[])(base.EndInvoke("GetLeftDefectListTube", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetRightDefectListTube(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetRightDefectListTube", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.DefectListTubeRight[] EndGetRightDefectListTube(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.DefectListTubeRight[] _result = ((importVtd.startTable.DefectListTubeRight[])(base.EndInvoke("GetRightDefectListTube", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginVTD_MapsDicts(string ikeyImport, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ikeyImport;
                System.IAsyncResult _result = base.BeginInvoke("VTD_MapsDicts", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndVTD_MapsDicts(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("VTD_MapsDicts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginMapsDicts(string ikeyImport, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = ikeyImport;
                System.IAsyncResult _result = base.BeginInvoke("MapsDicts", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndMapsDicts(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("MapsDicts", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetvtdfile_param(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("Getvtdfile_param", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.VtdfileParamTable[] EndGetvtdfile_param(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.VtdfileParamTable[] _result = ((importVtd.startTable.VtdfileParamTable[])(base.EndInvoke("Getvtdfile_param", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoad_VTDXLSfile(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("Load_VTDXLSfile", _args, callback, asyncState);
                return _result;
            }
            
            public string EndLoad_VTDXLSfile(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("Load_VTDXLSfile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetImpLog(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("GetImpLog", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.ImpLogVtd EndGetImpLog(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.ImpLogVtd _result = ((importVtd.startTable.ImpLogVtd)(base.EndInvoke("GetImpLog", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginApplyKeyMap(string tmp, string arrayKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = tmp;
                _args[1] = arrayKey;
                System.IAsyncResult _result = base.BeginInvoke("ApplyKeyMap", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndApplyKeyMap(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("ApplyKeyMap", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGet_TubeJournal(string keyImp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyImp;
                System.IAsyncResult _result = base.BeginInvoke("Get_TubeJournal", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetTubeJournal EndGet_TubeJournal(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetTubeJournal _result = ((importVtd.startTable.GetTubeJournal)(base.EndInvoke("Get_TubeJournal", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetInfoForVtdImport(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("GetInfoForVtdImport", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.InfoForVtdImportTable[] EndGetInfoForVtdImport(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.InfoForVtdImportTable[] _result = ((importVtd.startTable.InfoForVtdImportTable[])(base.EndInvoke("GetInfoForVtdImport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginStatisticsTable(string keyImport, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyImport;
                System.IAsyncResult _result = base.BeginInvoke("StatisticsTable", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetStatisticsTable EndStatisticsTable(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetStatisticsTable _result = ((importVtd.startTable.GetStatisticsTable)(base.EndInvoke("StatisticsTable", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportVTDLaunches(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("ImportVTDLaunches", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndImportVTDLaunches(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("ImportVTDLaunches", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportDefects(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("ImportDefects", _args, callback, asyncState);
                return _result;
            }
            
            public string EndImportDefects(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ImportDefects", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportTubeJournal(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("ImportTubeJournal", _args, callback, asyncState);
                return _result;
            }
            
            public string EndImportTubeJournal(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("ImportTubeJournal", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetUserNameById(string userKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = userKey;
                System.IAsyncResult _result = base.BeginInvoke("GetUserNameById", _args, callback, asyncState);
                return _result;
            }
            
            public string EndGetUserNameById(System.IAsyncResult result) {
                object[] _args = new object[0];
                string _result = ((string)(base.EndInvoke("GetUserNameById", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginDeleteVtdImport(string keyImport, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyImport;
                System.IAsyncResult _result = base.BeginInvoke("DeleteVtdImport", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndDeleteVtdImport(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("DeleteVtdImport", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginCreate_New_ImportVTD(string userKeyVar, string fileNameVar, string pathVar, string vtdDataKeyVar, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = userKeyVar;
                _args[1] = fileNameVar;
                _args[2] = pathVar;
                _args[3] = vtdDataKeyVar;
                System.IAsyncResult _result = base.BeginInvoke("Create_New_ImportVTD", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.KeyImpVtd EndCreate_New_ImportVTD(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.KeyImpVtd _result = ((importVtd.startTable.KeyImpVtd)(base.EndInvoke("Create_New_ImportVTD", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetKeyUser(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetKeyUser", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.KeyUserVtd EndGetKeyUser(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.KeyUserVtd _result = ((importVtd.startTable.KeyUserVtd)(base.EndInvoke("GetKeyUser", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetServiceVersion(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetServiceVersion", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.ServiceVersion EndGetServiceVersion(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.ServiceVersion _result = ((importVtd.startTable.ServiceVersion)(base.EndInvoke("GetServiceVersion", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetDbRepers(string keyImp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = keyImp;
                System.IAsyncResult _result = base.BeginInvoke("GetDbRepers", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetDbRepers EndGetDbRepers(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetDbRepers _result = ((importVtd.startTable.GetDbRepers)(base.EndInvoke("GetDbRepers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetFileRepers(string tmp, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = tmp;
                System.IAsyncResult _result = base.BeginInvoke("GetFileRepers", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetFileRepers EndGetFileRepers(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetFileRepers _result = ((importVtd.startTable.GetFileRepers)(base.EndInvoke("GetFileRepers", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginLoad_VTDXLSfileTrue(string newImportKey, string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = newImportKey;
                _args[1] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("Load_VTDXLSfileTrue", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndLoad_VTDXLSfileTrue(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("Load_VTDXLSfileTrue", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportFile(double impKey, string typeOfImport, string fileName, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[3];
                _args[0] = impKey;
                _args[1] = typeOfImport;
                _args[2] = fileName;
                System.IAsyncResult _result = base.BeginInvoke("ImportFile", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.StatusAnswer_ImpVtd EndImportFile(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.StatusAnswer_ImpVtd _result = ((importVtd.startTable.StatusAnswer_ImpVtd)(base.EndInvoke("ImportFile", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginIsOld_VTD_Available(string vtdMakingKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = vtdMakingKey;
                System.IAsyncResult _result = base.BeginInvoke("IsOld_VTD_Available", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.GetImportSecond EndIsOld_VTD_Available(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.GetImportSecond _result = ((importVtd.startTable.GetImportSecond)(base.EndInvoke("IsOld_VTD_Available", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginRemoveBound(string keyImport, string filekey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[2];
                _args[0] = keyImport;
                _args[1] = filekey;
                System.IAsyncResult _result = base.BeginInvoke("RemoveBound", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.RemoveBound EndRemoveBound(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.RemoveBound _result = ((importVtd.startTable.RemoveBound)(base.EndInvoke("RemoveBound", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginImportTubeMatching(string vtdMakingKey, string filekey, string dbKey, int typeLink, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[4];
                _args[0] = vtdMakingKey;
                _args[1] = filekey;
                _args[2] = dbKey;
                _args[3] = typeLink;
                System.IAsyncResult _result = base.BeginInvoke("ImportTubeMatching", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.KeyBoundResult EndImportTubeMatching(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.KeyBoundResult _result = ((importVtd.startTable.KeyBoundResult)(base.EndInvoke("ImportTubeMatching", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetTemMapping(string vtdMakingKey, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = vtdMakingKey;
                System.IAsyncResult _result = base.BeginInvoke("GetTemMapping", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.KeyBoundResult EndGetTemMapping(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.KeyBoundResult _result = ((importVtd.startTable.KeyBoundResult)(base.EndInvoke("GetTemMapping", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVtdJobStatus(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetVtdJobStatus", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.Res_Job EndGetVtdJobStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.Res_Job _result = ((importVtd.startTable.Res_Job)(base.EndInvoke("GetVtdJobStatus", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetVtdImpInfo(string key, System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[1];
                _args[0] = key;
                System.IAsyncResult _result = base.BeginInvoke("GetVtdImpInfo", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.InfoForOneVtdImport[] EndGetVtdImpInfo(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.InfoForOneVtdImport[] _result = ((importVtd.startTable.InfoForOneVtdImport[])(base.EndInvoke("GetVtdImpInfo", _args, result)));
                return _result;
            }
            
            public System.IAsyncResult BeginGetJobStatus(System.AsyncCallback callback, object asyncState) {
                object[] _args = new object[0];
                System.IAsyncResult _result = base.BeginInvoke("GetJobStatus", _args, callback, asyncState);
                return _result;
            }
            
            public importVtd.startTable.JobStatus EndGetJobStatus(System.IAsyncResult result) {
                object[] _args = new object[0];
                importVtd.startTable.JobStatus _result = ((importVtd.startTable.JobStatus)(base.EndInvoke("GetJobStatus", _args, result)));
                return _result;
            }
        }
    }
}
