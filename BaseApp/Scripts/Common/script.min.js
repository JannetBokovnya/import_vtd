function getStateForBookmark() { var t = GetCtl(), n; t != undefined ? (GetCtl().getCurrentState(), n = document.getElementById("hdnNewBookmark").value, n === "" && (JLOG.error("Функция модуля getCurrentState() вернула пустую строку!"), document.getElementById("hdnNewBookmark").value = "{}")) : window.getCurrentState() } function getCurrentState() { return setCurrentState("{}"), "{}" } function DeleteBookMark(n) { var t = GetBaseURL() + GetService() + "?inSQL=" + BookmarkQueryDeleteState + "(" + n + ")&inParams=&inType=2&nSeq=&isCompress=0&u=0.41930"; ajaxThis(t, ParseDeleteBookMark, !1) } function GetWindowNameForBookmark() { var n = GetCtl(); return n != undefined && typeof n.getWindowNameWithKey != "undefined" ? n.getWindowNameWithKey() : GetWindowName() } function getIsOpenedCN() { return isOpenedCN } function setIsOpenedCN(n) { isOpenedCN = n } function enableCNObserver() { observerable.addListener(NAVIGATION_CONTEXT_CHANGED, "NAVIGATION_CONTEXT_CHANGED", "updateCN") } function changeCNSync() { getIsOpenedCN() ? disableCNSync() : enableCNSync() } function changedContext() { getCN() } function getCN() { var n = getCookieByName("ContextNavigation"); if (n == null | n === "undefined") n = "{}"; else { var t = JSON.parse(n), i = parseFloat(t.KmStart), r = parseFloat(t.KmEnd); t.KmStart = i.toFixed(2); t.KmEnd = r.toFixed(2); n = JSON.stringify(t) } return n } function setCN(n) { setCookie("ContextNavigation", n) } function doSynch() { if (_isSynch = !_isSynch, _isSynch) { var n = document.getElementById("hdnCurrentCN").text; n != undefined && setCN(n) } SetActiveSynch(_isSynch); changeCNSync() } function enableCNSync() { JLOG.debug("Включен контекст навигации"); checkContext() && observerable.triggerEvent("NAVIGATION_CONTEXT_CHANGED", {}) } function disableCNSync() { JLOG.debug("Выключен контекст навигации"); setIsOpenedCN(!1) } function changeLabelCN(n) { if (n != null | n != undefined) { var t = JSON.parse(n), i = t.NameThreadShorten; i != undefined && (document.getElementById("hdnCurrentCN").text = n, document.getElementById("lblTest").innerText = i.length < 40 ? i + "\n" + t.KmStart + " - " + t.KmEnd + " м" : i.substr(0, 40) + "...\n" + t.KmStart + " - " + t.KmEnd + " м", document.getElementById("lblTest").title = i + "\t " + t.KmStart + " - " + t.KmEnd + " м", SetKmToCnPanel(t)) } } function ShowContextNavigationPannel(n) { var t = 0; n ? (document.getElementById("divContextNavigation").style.top = t, document.getElementById("divContextNavigation").style.visibility = "visible", document.getElementById("divContent").style.top = t, HidePannel("divBookMark"), SetActiveContextNavigation(!0)) : (HidePannel("divContextNavigation"), document.getElementById("divContent").style.top = 0, SetActiveContextNavigation(!1)); toggleDisabled(document.getElementById("divContent"), n) } function SetActiveContextNavigation(n) { document.getElementById("divCNChange").className = n ? "imgCNChangeActive" : "imgCNChange" } function setContextNavigation() { ChangeIsOpenedCN(); ShowContextNavigationPannel(!1); observerable.triggerEvent("NAVIGATION_CONTEXT_CHANGED", {}) } function checkContext() { var n = getCookieByName("ContextNavigation"); return n != null } function openContext() { isOpenedCN = !0; ShowContextNavigationPannel(getIsOpenedCN()) } function closeContext() { isOpenedCN = !1; ShowContextNavigationPannel(getIsOpenedCN()) } function cancelContextMenu() { isOpenedCN = !1; ShowContextNavigationPannel(!1) } function UpdateCNForModule(n, t) { var e = "", i = JSON.parse(t), f, r, u, o, s; i != null && (f = i.Destination, f.length > 0 && (e = f[0])); _isSynch ? (r = receiveAdapter(n, t), r === 0 && setTimeout(function () { receiveAdapter(n, t) }, 1e3), u = getCN(), changeLabelCN(u)) : _cWindowName === e && (r = receiveAdapter(n, t), r === 0 && setTimeout(function () { receiveAdapter(n, t) }, 1e3), i.EventParam != null && (o = parseFloat(i.EventParam.KmStart), s = parseFloat(i.EventParam.KmEnd), i.EventParam.KmStart = o.toFixed(2), i.EventParam.KmEnd = s.toFixed(2), u = JSON.stringify(i.EventParam), changeLabelCN(u))) } function changeKMContext(n, t) { var f, i; if (_isSynch) { var e = getCN(), r = JSON.parse(e), o = r.KmStart, s = r.KmEnd; (o !== n || s !== t) && (r.KmStart = n, r.KmEnd = t, f = JSON.stringify(r), setCN(f), observerable.triggerEvent("NAVIGATION_CONTEXT_CHANGED", {})) } else if (i = document.getElementById("hdnCurrentCN").text, i != null) { var u = JSON.parse(i), h = n, c = t; u.KmStart = h.toFixed(2); u.KmEnd = c.toFixed(2); i = JSON.stringify(u); changeLabelCN(i); document.getElementById("hdnCurrentCN").text = i } } function ChangeIsOpenedCN() { isOpenedCN = !isOpenedCN } function HidePannel(n) { document.getElementById(n).style.top = 0; document.getElementById(n).style.visibility = "hidden" } function GetCtl() { return _Ctl } function SetCtl(n) { _Ctl = n; _isLoad = !0; JLOG.info("Контекст приложения задан" + n) } function receiveAdapter(n, t) { var i = 0, r; return JLOG.info("Параметры готовы к передачи в приложение. in_EventName:" + n + "; in_Params:" + t), _isLoad && (r = GetCtl(), r != null && (GetCtl().receiveEvent(n, t), i = 1, JLOG.info("Параметры переданы"))), i } function receiveEvent() { var o = ListenerEvents(), n, i, s, f, e, t, r, u; if (o != null && o !== "") for (s = JSON.parse(o).EventName, f = 0; f < s.length; f++) if (n = s[f], i = getCookieByName(n), i != null && i !== "") if (e = JSON.parse(i), t = e.Destination, isEmpty(t) === !0) r = window.receiveAdapter ? receiveAdapter(n, i) : 1, n === "OPEN_WINDOW" && (r = 1), r === 1 && delCookie(n); else for (u = t.length - 1; u >= 0; u--) t[u] === GetWindowName() && (n === "NAVIGATION_CONTEXT_CHANGED" ? (SendEventFromModuleWindows(n, i), u = -1, delCookie(n)) : (r = window.receiveAdapter ? receiveAdapter(n, i) : 1, n === "OPEN_WINDOW" && (r = 1), r === 1 && (t.length === 1 ? delCookie(n) : (removeFromArray(t, t[u]), e.Destination = t, a = JSON.stringify(e), setCookie(n, a))))); setTimeout(receiveEvent, 500) } function SendEventToFlashModules(n, t) { if (_isLoad) { var i = GetCtl(); i != null && GetCtl().receiveEvent(n, t) } } function SendEventFromModuleWindows(n, t) { var r = getCookieByName(_WindowStatus), i; if (r != undefined) { l_r = JSON.parse(r); var u = l_r.WindowStatus.length, e = "javascript:UpdateCNForModule('" + n + "', '" + ChangeFlashToDoubleFlash(t) + "')", f = []; for (i = 0; i < u; i++) f[i] = l_r.WindowStatus[i].WindowName; for (i = 0; i < u; i++) window.open(e, f[i]) } } function sendEvent(n, t, i) { var r, u; typeof t == "object" && (t = JSON.stringify(t)); r = ""; i === "broadcast" ? r = GetListenWindow(n) : i !== "" ? (Send2Window(n, i), r = '"' + i + '"') : Send2Window(n, i); u = '{"SenderWindow":"' + GetWindowName() + '", "Destination":[' + r + '], "EventParam": ' + t + " }"; setCookie(n, u) } function GetListenerEvent() { JLOG.info("Получить список возможных событий для приложения"); var n = GetBaseURL() + GetService() + "?inSQL=" + EventEngineQueryGetEvents4App + "('" + GetWindowName() + "')&inParams=&inType=2&nSeq=&isCompress=0&u=0.41930"; ajaxThis(n, ParseListenerEvent, !1) } function ParseListenerEvent(n) { var r, t, u, i, f, e; for (_ListenerEvents = n.responseText, r = getCookieByName(_WindowStatus), JLOG.info("Список событий получен :" + _ListenerEvents), t = JSON.parse(r), u = JSON.parse(_ListenerEvents), i = 0; i < t.WindowStatus.length; i++) f = GetWindowName(), t.WindowStatus[i].WindowName === f && t.WindowStatus[i].EventListen.push(u); e = JSON.stringify(t); setCookie(_WindowStatus, e) } function ListenerEvents() { return _ListenerEvents } function GetListenWindow(n) { for (var e, r, o, u, t = "", s, h = getCookieByName(_WindowStatus), f = JSON.parse(h), i = 0; i < f.WindowStatus.length; i++) for (e = f.WindowStatus[i].EventListen, s = f.WindowStatus[i].WindowName, r = 0; r < e.length; r++) for (o = e[r].EventName, u = 0; u < o.length; u++) o[u] === n && (t !== "" && (t = t + ","), t = t + '"' + s + '"'); return t } function delCookie(n) { setCookie(n, ""); JLOG.debug("Кука: " + n + " - очищена") } function getCookieByName(n) { CheckCookiesId(); var t = localStorage.getItem(n); return t != null && (t = unescape(t)), t } function setCookie(n, t) { var r, i; if (CheckCookiesId(), r = isLocalStorageAvailable(), r) try { i = {}; i.key = n; i.oldValue = getCookieByName(n); i.newValue = t; localStorage.setItem(n, t) } catch (u) { JLOG.fatal("LocalStorage: ошибка при записи." + u.message) } } function CheckCookiesId() { var n = GetCookiesId(); (n == null || n == "null" || n == undefined || n == "undefined") && (localStorage.clear(), SetCookiesId()) } function SetCookiesId() { document.cookie = "CookiesId=" + Math.floor((1 + Math.random()) * 65536).toString(16).substring(1) + "; path=/" } function GetCookiesId() { for (var i, r, t = document.cookie.split(";"), n = 0; n < t.length; n++) if (i = t[n].substr(0, t[n].indexOf("=")), r = t[n].substr(t[n].indexOf("=") + 1), i = i.replace(/^\s+|\s+$/g, ""), i === "CookiesId") return unescape(r); return null } function isLocalStorageAvailable() { try { return "localStorage" in window && window.localStorage !== null } catch (n) { return JLOG.fatal("Не поддерживается LocalStorage!"), !1 } } function setSessionStart() { var n = "sessionStart", i = getCookieByName(n), t; i == null && (t = new Date, setCookie(n, t)) } function SetLocalStorageEvent() { window.addEventListener ? window.addEventListener("storage", handle_storage, !1) : handle_storageIE8() } function handle_storage(n) { n || (n = window.event); n.key === "jSonNotitications" && UpdateNotificationControl() } function handle_storageIE8() { var n = getCookieByName("jSonNotitications"); prevNotificationJson !== n && (UpdateNotificationControl(), prevNotificationJson = n); setTimeout(handle_storageIE8, 1e3) } function checkTimeNotification(n) { var t, i; (n === undefined || n === null) && UpdateNotificationControl(); t = (new Date).getTime(); i = getCookieByName("NotificationUpdatingTime"); i == undefined || i == null ? (setCookie("NotificationUpdatingTime", t), CheckNewNotification()) : t - .2 * 6e4 > i && (setCookie("NotificationUpdatingTime", t), CheckNewNotification()); setTimeout(function () { checkTimeNotification(1) }, 5e3) } function CheckNewNotification() { var n = GetBaseURL() + GetService() + "?inSQL=" + notificationQueryGetNotification + "('" + document.getElementById("hdnUser").value + "','0')&inParams=&inType=2&ContentType=application/json&isCompress=0&u=0.41930"; ajaxThis(n, ParseCheckNewNotification, !1) } function ParseCheckNewNotification(n) { var t = n.responseText; setCookie("jSonNotitications", t) } function changeCheckBox(n) { var t = $(n).parent().children("input[type='checkbox']"); t[0].onchange = onChangeEventFunc; t[0].click() } function onChangeEventFunc() { var n = this.checked, t = $(this).parent().children("div#divCheckBox"), i = t.attr("listBoxIndex"), r = $find("ctl00_Body_pnlNotifications_radLstBox"), u = r.get_items().getItem(i), f = u.get_value(); ChangeNotificationImportantStatus(f, n) } function ChangeNotificationImportantStatus(n, t) { var i = GetBaseURL() + GetService() + "?inSQL=" + notificationQuerySetImportantStatus + "(" + n + "," + t + ")&inParams=&inType=2&ContentType=application/json&isCompress=0&u=0.41930"; ajaxThis(i, ParseChangeNotificationImportantStatus, !1) } function ParseChangeNotificationImportantStatus() { var n = $(this).parent().children("div#divCheckBox"); n.css("background", "url(" + imageBindingDiv + ")"); this.checked ? n.css("background-position", "-31px -55px") : n.css("background-position", "-4px -55px") } function UpdateNotificationControl() { var n; return } function NotificationItemClosed() { SetNotificationsAsReading() } function SetNotificationsAsReading() { var n = GetYoungerNotificationKey(); n != null ? ParseSetNotificationsAsReading() : JLOG.info('NotificationEngine: не получен ключ уведомления. Устанавливать в "Прочитано" нечего.') } function ParseSetNotificationsAsReading() { var n = getCookieByName("jSonNotitications"), t, i; if (n !== undefined && n !== null) { for (t = JSON.parse(n), i = 0; i < t.length; i++) t[i].isdelivered = 1; n = JSON.stringify(t); setCookie("jSonNotitications", n); UpdateNotificationControl() } } function GetYoungerNotificationKey() { var t = null, u = $find("rmNotification"), i = u.get_items().getItem(0), n, r; return i != undefined && (n = i.get_items(), r = n.get_count(), r > 0 && (t = n.getItem(0).get_value())), t } function removeFromArray(n) { for (var t, i = arguments, r = i.length, u; r > 1 && n.length;) for (t = i[--r]; (u = n.indexOf(t)) !== -1;) n.splice(u, 1); return n } function GetBaseURL() { return "http://" + window.location.host + getAppPath() } function GetClassWindowName() { var n, t = GetWindowName(), i = t.indexOf("_"); return i !== -1 && (n = t.substring(0, i)), n == undefined && (n = t), n } function GetService() { return "/DataProvider/OraWCI.aspx" } function ParseGetHelpUrl(n) { var u = n.responseText, t = JSON.parse(u).HELPURL, i, r; t !== "index.html" && (t = "Documents/" + t); i = "menubar=no,location=yes,status=no"; r = window.open("/../User_Help/ru/" + t, "", i); r.focus() } function GetHelpUrl() { var n = GetBaseURL() + GetService() + "?inSQL=gis_meta.help_api.gethelpurl('" + GetClassWindowName() + "')&inParams=&inType=2&nSeq=&isCompress=0&u=0.41930"; ajaxThis(n, ParseGetHelpUrl, !1) } function ParseWindowByEventKey(n) { var i, u, e; JLOG.info("Получаем данные (название окна)"); i = n.responseText; JLOG.debug("Название окна, для события" + i); try { var f = JSON.parse(i).WindowName, r = JSON.parse(i).Instance, t = r == null || r === "" ? f : r; t != null && t !== "" && (u = isWindowOpen(t), u === 0 ? OpenNewWindow(f, r) : u === 1 && t !== _cWindowName && (e = window.open("", t), e.window.focus())) } catch (o) { JLOG.error("Во время вычитывания названия приложения, произошла ошибка: " + o.ToString) } } function getUserInfo() { var n = {}; return n.FIO = document.getElementById("hdnUserFIO").value, n.Key = document.getElementById("hdnUser").value, n } function Send2Window(n, t) { JLOG.info("Получить по ключу события, название окна"); var i = GetBaseURL() + GetService() + "?inSQL=" + WindowQueryGetWindowName4Event + "('" + n + "','" + t + "')&inParams=&inType=2&nSeq=&isCompress=0&u=0.41930"; ajaxThis(i, ParseWindowByEventKey, !1) } function isEmpty(n) { for (var t in n) if (n.hasOwnProperty(t)) return !1; return !0 } function ChangeFlashToDoubleFlash(n) { return n.replace(/\\/g, "\\\\") } function GetOpenWindowAPI() { for (var r, u = getCookieByName(_WindowStatus), i = JSON.parse(u), n = "", t = 0; t < i.WindowStatus.length; t++) n !== "" && (n = n + ","), r = '{"Name":"' + i.WindowStatus[t].WindowName + '", "Title":"' + i.WindowStatus[t].WindowTitle + '"}', n = n + r; return '{"WindowName": [' + n + "]}" } function ajaxThis(n, t, i, r, u) { var e, f, o; r = typeof r != "undefined" ? r : "GET"; u = typeof u != "undefined" ? u : null; e = n + "&randomnumber=" + Math.floor(Math.random() * 1e4); JLOG.debug("AJAX запрос по URL:" + e); f = newXMLHttpRequest(); o = getReadyStateHandler(f, t); f.onreadystatechange = o; f.open(r, e, i); f.setRequestHeader("Content-type", "application/x-www-form-urlencoded"); f.send(u) } function newXMLHttpRequest() { JLOG.debug("Начало создание объекта XMLHttpRequest"); var n = !1; if (window.XMLHttpRequest) n = new XMLHttpRequest, JLOG.debug("Объект XMLHttpRequest - создан"); else if (window.ActiveXObject) try { n = new ActiveXObject("Msxml2.XMLHTTP"); JLOG.debug("Объект XMLHttpRequest - создан") } catch (t) { try { JLOG.error(t.ToString); n = new ActiveXObject("Microsoft.XMLHTTP") } catch (i) { JLOG.fatal(i.ToString) } } return n } function getReadyStateHandler(n, t) { return function () { n.readyState === 0 ? JLOG.debug("ReadyState: request not initialized ") : n.readyState === 1 ? JLOG.debug("ReadyState: server connection established") : n.readyState === 2 ? JLOG.debug("ReadyState: request received ") : n.readyState === 3 ? JLOG.debug("ReadyState: processing request") : n.readyState === 4 && (JLOG.debug("ReadyState: request finished and response is ready"), n.status === 200 ? (IsAuthPage(n) && window.location.reload(), t(n)) : JLOG.fatal("HTTP error: " + n.status)) } } function toggleDisabled(n, t) { try { n.disabled = t } catch (r) { } if (n.childNodes && n.childNodes.length > 0) for (var i = 0; i < n.childNodes.length; i++) toggleDisabled(n.childNodes[i], t) } function IsAuthPage(n) { var t = n.responseText.search('<meta name="PageName" content="Authorization"'); return t !== -1 ? !0 : !1 } function AddMenuToArray(n) { if (!arrayContains(RadMenuItemIDs, n.get_id())) { var t = RadMenuItemIDs.length; RadMenuItemIDs[t] = n.get_id() } } function CloseAllOpenMenus(n) { for (var i, r, t = 0; t < RadMenuItemIDs.length; t++) RadMenuItemIDs[t] !== n.get_id() && (i = $find(RadMenuItemIDs[t]), r = i.get_openedItem(), r != null && (r.close(), i.set_clicked(!1))); DeselectFilterMenu() } function arrayContains(n, t) { for (var i = 0; i < n.length; i++) if (n[i] === t) return !0; return !1 } function OnClientMouseOverHandler(n, t) { t.get_item().get_parent() === n && n.set_clicked(!1) } function OnClientItemClicking(n, t) { var i = t.get_item().get_level(); i === 0 && CloseAllOpenMenus(n, t) } function CloseRadMenu(n, t) { var i = t.get_item().get_items().get_count(); i === 0 && n.close(!0) } function OpenNewWindow(n, t) { JLOG.info("Получить URL для приложения"); var i = GetBaseURL() + GetService() + "?inSQL=" + WindowEngineQueryGetUrl4WindowName + "('" + n + "','" + t + "')&inParams=&inType=2&nSeq=&isCompress=0&u=0.41930"; ajaxThis(i, ParseOpenNewWindow, !1) } function isWindowOpen(n) { n = n + _paramsDelim; var t = getCookieByName(_WindowRegisterName), i = t.indexOf(n); return i >= 0 ? 1 : 0 } function ParseOpenNewWindow(n) { var i = n.responseText; JLOG.debug("Получено URL для прилоежния: " + i); var u = JSON.parse(i).WindowURL, t = JSON.parse(i).Instance, f = t !== "" ? "?instanceName=" + t : "", r = GetBaseURL() + u + f; JLOG.debug("window.open(" + r + "," + t + ")"); window.open(r, t).focus() } function GetWindowName() { return _cWindowName } function windowClosed(n) { JLOG.info("Модуль закрыт:" + n); windowRegister(n, "windowClosed") } function closeAllWindows() { var r = getCookieByName(_WindowStatus), t, n, i; if (r != undefined) { for (t = JSON.parse(r), n = 0; n < t.WindowStatus.length; n++) i = t.WindowStatus[n].WindowName, window.GetWindowName() !== i && CloseWindow(i); setCookie(_WindowIsCleanStorage, "true") } } function CloseWindow(n) { for (var r, u = getCookieByName(_WindowStatus), t = JSON.parse(u), i = 0; i < t.WindowStatus.length; i++) t.WindowStatus[i].WindowName === n && (t.WindowStatus[i].Status = "Close"); r = JSON.stringify(t); setCookie(_WindowStatus, r) } function DeleteWindow(n) { for (var r, u = getCookieByName(_WindowStatus), t = JSON.parse(u), i = 0; i < t.WindowStatus.length; i++) t.WindowStatus[i].WindowName === n && t.WindowStatus.splice([i], 1); r = JSON.stringify(t); setCookie(_WindowStatus, r) } function addWindow() { var n = getCookieByName(_WindowStatus), t = n == null ? { WindowStatus: [] } : JSON.parse(n), i; l_cPush = '{ "WindowName": "' + GetWindowName() + '" ,"WindowTitle":"' + GetWindowTitle() + '","Status":"Up", "CNSync":"false", "EventListen":[]}'; l_cPushJson = JSON.parse(l_cPush); t.WindowStatus.push(l_cPushJson); i = JSON.stringify(t); setCookie(_WindowStatus, i) } function windowRegister(n, t) { var i, r, u; setWindowName(n); i = n + _paramsDelim; r = getCookieByName(_WindowRegisterName); t === "windowLoad" ? (r == null ? setCookie(_WindowRegisterName, i) : (u = r == null ? i : r + i, setCookie(_WindowRegisterName, u)), addWindow(), ChekWindowStatus()) : t === "windowClosed" && (DeleteWindow(GetWindowName()), u = r.replace(i, ""), setCookie(_WindowRegisterName, u)) } function ChekWindowStatus() { var r = GetWindowName(), i = getCookieByName(_WindowStatus), u = JSON.parse(i), t = u.WindowStatus, n; for (SetHdnWindowOpen(i), n = 0; n < t.length; n++) t[n].WindowName === r && t[n].Status === "Close" && window.close(); setTimeout(ChekWindowStatus, 500) } function countOpenedWindows() { var n = getCookieByName(_WindowStatus), t; return n != undefined ? (t = JSON.parse(n), t.WindowStatus.length) : 0 } function setWindowName(n) { window.name = n } function GetWindowTitle() { return window.document.title } function VideoPlayerMenuShow(n, t) { var i = 550, r = 300; $("#playerVideoName").val(n); $("#playerVideoFon").css("display", "block"); $("#playerMenu").css("width", i + "px"); $("#playerMenu").css("height", r + "px"); $("#playerMenu").css("margin-top", -r / 2 + "px"); $("#playerMenu").css("margin-left", -i / 2 + "px"); jwplayer("playerVideoSwf").setup({ file: t, flashplayer: "../../UserControls/VideoPlayer/player.swf", width: i, height: r }) } function VideoPlayerMenuHidden() { jwplayer("playerVideoSwf").stop(); $("#playerVideoFon").css("display", "none") } var BookmarkQueryDeleteState = "db_api.wrapper_api.DeleteState", EventEngineQueryGetEvents4App = "db_api.wrapper_api.GetEvent4Application", WindowQueryGetWindowName4Event = "db_api.wrapper_api.GetWindowName4Event", WindowEngineQueryGetUrl4WindowName = "db_api.wrapper_api.GetURL4WindowName", notificationQueryGetNotification = "db_api.hf_notification.GetNotification4User_Time", notificationQuerySetImportantStatus = "db_api.hf_notification.GetNotification4User_Time", notificationQuerySetAsReading = "db_api.hf_notification.Test", toOpen = !0, _isSynch = !1, isOpenedCN = !1, NAVIGATION_CONTEXT_CHANGED = { updateCN: function () { if (checkContext() && _isSynch) { var n = getCN(); JLOG.info("Обновить контекст навигации во всех окнах: " + n); sendEvent("NAVIGATION_CONTEXT_CHANGED", n, GetWindowName()) } } }, _Ctl = null, _ListenerEvents = null, _isLoad = !1, prevNotificationJson, JLOG = new Log(Log.NONE, Log.popupLogger), RadMenuItemIDs; JLOG.info("Модуль запускается"); Array.prototype.indexOf || (Array.prototype.indexOf = function (n) { var i = this.length >>> 0, t = Number(arguments[1]) || 0; for (t = t < 0 ? Math.ceil(t) : Math.floor(t), t < 0 && (t += i) ; t < i; t++) if (t in this && this[t] === n) return t; return -1 }); RadMenuItemIDs = []; var _paramsDelim = "|", _cWindowName = null, _WindowRegisterName = "WindowLoaded", _WindowStatus = "WindowStatus", _WindowIsCleanStorage = "IsCleanStorage";
/*
//# sourceMappingURL=script.min.js.map
*/